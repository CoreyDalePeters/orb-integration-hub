{
  "documents": [
    {
      "source": "README.md",
      "document_content": "# orb-integration-hub\nThis is a payment gateway for OneRedBoot.com(ORB). It is a simple payment gateway that allows users to make payments \nusing their credit card. The payment gateway is built using Node.js and Express.js. The payment gateway is integrated \nwith Stripe to process payments.\n\nThe payment gateway is also integrated with SendGrid to send email notifications to users after a successful payment.\n\n## Setup\n\n### Create the React app\n1. cd org-integration-hub/frontend\n2. npx create-react-app .\n3. Clean up the default files:\n  - Remove logo.svg and App.test.js\n  - Simplify App.js and index.js\n4. npm install react-router-dom axios @aws-amplify/ui-react aws-amplify\n5. create directories for the components: components, pages, and services\n6. create the following components:\n  - components: Header.js, Footer.js\n  - pages: Home.js, Payment.js, Success.js\n  - services: api.js\n7. npm start\n8. npm install --save-dev @testing-library/react @testing-library/jest-dom\n9. npm install --save-dev identity-obj-proxy\n10. npm test\n11. npm install @stripe/react-stripe-js @stripe/stripe-js\n12. npm install aws-amplify@latest\n13. npm install aws-amplify @aws-amplify/ui-react\n\n\n\n\n\n\n## Stripe flow\n![img.png](assets/stripe-payment-flow.png)\n\ncurl https://api.stripe.com/v1/balance \\\n  -u \"{{SECRET_KEY}}\" \\\n  -H \"Stripe-Account: {{CONNECTED_ACCOUNT_ID}}\" \\\n  -d \"expand[]\"=\"instant_available.net_available\"\n\n\n## Creating the ui (React)\ncd frontend\nnpm create amplify@latest\nnpx ampx generate outputs --stack orb-integration-hub-api-cognito\n"
    },
    {
      "source": "frontend/src/app/app.component.ts",
      "document_content": "// src/app/app.component.ts\n\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from './services/auth.service';\n\n@Component({\n  selector: 'app-root',\n  template: '<router-outlet></router-outlet>'\n})\n\nexport class AppComponent {}\n"
    },
    {
      "source": "frontend/src/app/models/user.model.ts",
      "document_content": "/**\n * Enum defining all possible user groups in the system (matching Cognito groups)\n */\nexport enum UserGroup {\n  USER = 'User',           // Base group\n  CUSTOMER = 'Customer',   // End-users making purchases\n  CLIENT = 'Client',       // Customers using the service\n  EMPLOYEES = 'Employees', // Internal staff\n  OWNER = 'Owner'         // Root-level access\n}\n\n/**\n * Status of user's account\n */\nexport enum UserStatus {\n  ACTIVE = 'ACTIVE',\n  PENDING = 'PENDING',\n  SUSPENDED = 'SUSPENDED',\n  INACTIVE = 'INACTIVE'\n}\n\n/**\n * Interface representing a user in the system\n * Contains all essential user information and profile data\n */\nexport interface User {\n  /** Unique identifier for the user in our database */\n  id: string;\n\n  /** User's Cognito ID for AWS authentication */\n  cognito_id: string;\n\n  /** Username for login */\n  username: string;\n\n  /** User's email address */\n  email: string;\n\n  /** User's role in the system */\n  group: UserGroup;\n\n  /** Current status of the user's account */\n  status: UserStatus;\n\n  /** Timestamp of when the user was created */\n  created_at: string;\n\n  /** Timestamp of the last update to user's profile */\n  updated_at: string;\n\n  /** Optional profile data */\n  profile?: {\n    /** User's full name */\n    full_name?: string;\n    /** User's phone number */\n    phone?: string;\n    /** User's preferred language */\n    language?: string;\n    /** Additional preferences */\n    preferences?: {\n      /** Email notification settings */\n      email_notifications?: boolean;\n      /** Theme preference */\n      theme?: 'light' | 'dark';\n    };\n  };\n}\n\n\n\n/**\n * Interface for creating a new user\n * Omits system-generated fields\n */\nexport type CreateUserInput = Omit<User, 'id' | 'created_at' | 'updated_at'>;\n\n/**\n * Interface for updating an existing user\n * Makes all fields optional except id\n */\nexport type UpdateUserInput = Partial<Omit<User, 'id'>> & { id: string };\n"
    },
    {
      "source": "frontend/src/app/models/auth.model.ts",
      "document_content": "// src/app/models/auth.models.ts\nexport interface SignInCredentials {\n  username: string;\n  password: string;\n}\n\nexport interface SignInResponse {\n  success: boolean;\n  user?: any;\n  error?: string;\n  role?: string;\n}\n"
    },
    {
      "source": "frontend/src/app/layouts/app-layout/app-layout.component.ts",
      "document_content": "import { Component } from '@angular/core';\nimport {AuthService} from \"../../services/auth.service\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-home-layout',\n  templateUrl: './app-layout.component.html',\n  styleUrls: ['./app-layout.component.scss']\n})\nexport class AppLayoutComponent {\n  title = 'OneRedBoot Integration Hub';\n  currentYear: number = new Date().getFullYear();\n  isAuthenticated$ = this.authService.isAuthenticated$();\n\n  constructor(\n    private authService: AuthService,\n    public router: Router  // Make router public to use in template\n  ) {}\n\n  async signOut(): Promise<void> {\n    try {\n      await this.authService.signOut();\n      await this.router.navigate(['/home']);\n    } catch (error) {\n      console.error('Sign out error:', error);\n    }\n  }\n}\n"
    },
    {
      "source": "frontend/src/app/layouts/app-layout/app-layout.component.html",
      "document_content": "<div class=\"app-container\">\n  <header class=\"header\">\n    <div class=\"logo-container\">\n      <img src=\"../../../assets/hardhat.jpg\" alt=\"hardhat\" />\n      <h1>Integration Hub</h1>\n    </div>\n    <nav class=\"nav-menu\">\n      <ng-container *ngIf=\"!(isAuthenticated$ | async)\">\n        <a routerLink=\"/home\" routerLinkActive=\"active\" class=\"nav-link\">Home</a>\n        <a routerLink=\"/signin\" routerLinkActive=\"active\" class=\"nav-link\">Sign In</a>\n        <a routerLink=\"/signup\" routerLinkActive=\"active\" class=\"nav-link\">Sign Up</a>\n      </ng-container>\n      <ng-container *ngIf=\"isAuthenticated$ | async\">\n        <button (click)=\"signOut()\" class=\"signout-button\">Sign Out</button>\n      </ng-container>\n    </nav>\n  </header>\n\n  <main class=\"main-content\">\n    <router-outlet></router-outlet>\n  </main>\n</div>\n"
    },
    {
      "source": "frontend/src/app/layouts/page-layout/page-layout.component.html",
      "document_content": "<header class=\"header\">\n  <div class=\"logo-container\">\n    <img src=\"../../../assets/hardhat.jpg\" alt=\"hardhat\" />\n    <h1>Integration Hub</h1>\n  </div>\n</header>\n\n<div class=\"app-container\">\n  <main class=\"main-content\">\n    <router-outlet></router-outlet>\n  </main>\n</div>\n"
    },
    {
      "source": "frontend/src/app/components/confirm-signup/confirm-signup.component.ts",
      "document_content": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-confirm-signup',\n  templateUrl: './confirm-signup.component.html',\n  styleUrls: ['./confirm-signup.component.scss']\n})\nexport class ConfirmSignupComponent implements OnInit, OnDestroy {\n  confirmationForm: FormGroup;\n  isLoading = false;\n  errorMessage = '';\n  username = '';\n  resendDisabled = false;\n  resendTimer: any;\n  resendCountdown = 0;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {\n    this.confirmationForm = this.fb.group({\n      verificationCode: ['', [\n        Validators.required,\n        Validators.pattern('^[0-9]{6}$')\n      ]]\n    });\n  }\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      this.username = params['username'];\n      if (!this.username) {\n        this.router.navigate(['/signup']);\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    if (this.resendTimer) {\n      clearInterval(this.resendTimer);\n    }\n  }\n\n  async onSubmit(): Promise<void> {\n    if (this.confirmationForm.valid && !this.isLoading) {\n      this.isLoading = true;\n      this.errorMessage = '';\n\n      try {\n        await this.authService.confirmRegistration(\n          this.username,\n          this.confirmationForm.get('verificationCode')?.value,\n          ''  // Pass empty string for mfaCode since this is just email verification\n        );\n        await this.router.navigate(['/signin']);\n      } catch (error: any) {\n        this.errorMessage = error.message || 'Failed to verify account';\n      } finally {\n        this.isLoading = false;\n      }\n    }\n  }\n\n  async resendCode(): Promise<void> {\n    if (!this.resendDisabled) {\n      try {\n        await this.authService.resendConfirmationCode(this.username);\n        this.startResendTimer();\n      } catch (error: any) {\n        this.errorMessage = error.message || 'Failed to resend code';\n      }\n    }\n  }\n\n  private startResendTimer(): void {\n    this.resendDisabled = true;\n    this.resendCountdown = 60;\n\n    this.resendTimer = setInterval(() => {\n      this.resendCountdown -= 1;\n      if (this.resendCountdown <= 0) {\n        this.resendDisabled = false;\n        clearInterval(this.resendTimer);\n      }\n    }, 1000);\n  }\n}\n"
    },
    {
      "source": "frontend/src/app/components/confirm-signup/confirm-signup.component.html",
      "document_content": "<!-- confirm-signup.component.html -->\n<div class=\"confirm-signup-container\">\n  <div class=\"logo-container\">\n    <img src=\"assets/onredboot-logo.jpg\" alt=\"OneRedBoot Logo\">\n  </div>\n\n  <div class=\"confirmation-info\">\n    <h2>Verify Your Account</h2>\n    <p>Please enter the verification code sent to your email</p>\n  </div>\n\n  <form [formGroup]=\"confirmationForm\" (ngSubmit)=\"onSubmit()\">\n    <div class=\"form-group\">\n      <div class=\"verification-input\">\n        <input\n          type=\"text\"\n          class=\"form-input\"\n          formControlName=\"verificationCode\"\n          placeholder=\"Enter verification code\"\n          maxlength=\"6\"\n          autocomplete=\"off\"\n        >\n      </div>\n      <div\n        class=\"error-message\"\n        *ngIf=\"confirmationForm.get('verificationCode')?.touched && confirmationForm.get('verificationCode')?.invalid\"\n      >\n        <span *ngIf=\"confirmationForm.get('verificationCode')?.errors?.['required']\">\n          Verification code is required\n        </span>\n        <span *ngIf=\"confirmationForm.get('verificationCode')?.errors?.['pattern']\">\n          Please enter a valid 6-digit code\n        </span>\n      </div>\n    </div>\n\n    <div class=\"error-banner\" *ngIf=\"errorMessage\">\n      {{ errorMessage }}\n    </div>\n\n    <button\n      type=\"submit\"\n      class=\"submit-button\"\n      [disabled]=\"!confirmationForm.valid || isLoading\"\n    >\n      <span *ngIf=\"!isLoading\">Verify Account</span>\n      <div class=\"loader\" *ngIf=\"isLoading\"></div>\n    </button>\n\n    <div class=\"form-links\">\n      <div class=\"resend-code\">\n        <span *ngIf=\"!resendDisabled\">\n          Didn't receive the code?\n          <button\n            type=\"button\"\n            class=\"link-button\"\n            (click)=\"resendCode()\"\n          >\n            Resend Code\n          </button>\n        </span>\n        <span *ngIf=\"resendDisabled\">\n          Resend available in {{ resendCountdown }}s\n        </span>\n      </div>\n      <div class=\"back-to-signin\">\n        <a routerLink=\"/signin\">Back to Sign In</a>\n      </div>\n    </div>\n  </form>\n</div>\n"
    },
    {
      "source": "frontend/src/app/components/signin/signin.component.ts",
      "document_content": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { AuthService } from '../../services/auth.service';\nimport { UserGroup } from \"../../models/user.model\";\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n  styleUrls: ['./signin.component.scss']\n})\nexport class SignInComponent implements OnInit, OnDestroy {\n  signInForm: FormGroup;\n  mfaForm: FormGroup;\n  isLoading = false;\n  errorMessage = '';\n  passwordVisible = false;\n  needsMFA = false;\n  mfaType: 'sms' | 'totp' | null = null;\n  private destroy$ = new Subject<void>();\n  rememberDevice = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.signInForm = this.fb.group({\n      username: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(8)]]\n    });\n\n    this.mfaForm = this.fb.group({\n      code: ['', [Validators.required, Validators.pattern(/^\\d{6}$/)]]\n    });\n  }\n\n  ngOnInit(): void {\n    this.authService.isAuthenticated$()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(isAuth => {\n        if (isAuth) {\n          this.navigateBasedOnGroup();\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  togglePasswordVisibility(): void {\n    this.passwordVisible = !this.passwordVisible;\n  }\n\n  async onSubmit(): Promise<void> {\n    if (this.needsMFA) {\n      await this.handleMFASubmit();\n    } else {\n      await this.handleInitialSignIn();\n    }\n  }\n\n  private async handleInitialSignIn(): Promise<void> {\n    if (this.signInForm.valid && !this.isLoading) {\n      this.isLoading = true;\n      this.errorMessage = '';\n\n      try {\n        console.info('Starting initial sign in...');\n        const response = await this.authService.signIn(\n          this.signInForm.get('username')?.value,\n          this.signInForm.get('password')?.value\n        );\n        console.debug('Sign in response:', response);\n\n        if (response.needsMFA) {\n          console.info('MFA verification required');\n          this.needsMFA = true;\n          this.mfaType = response.mfaType || 'totp';\n          this.errorMessage = '';\n        } else if (response.success) {\n          console.info('Sign in successful, checking auth state...');\n          await this.navigateBasedOnGroup();\n        } else {\n          console.warn('Sign in unsuccessful:', response.error);\n          this.errorMessage = response.error || 'An error occurred during sign in';\n        }\n      } catch (error: any) {\n        console.error('Handle initial sign in error:', error);\n        this.handleError(error);\n      } finally {\n        this.isLoading = false;\n      }\n    } else {\n      this.markFormFieldsAsTouched(this.signInForm);\n    }\n  }\n\n  private async handleMFASubmit(): Promise<void> {\n    if (this.mfaForm.valid && !this.isLoading) {\n      this.isLoading = true;\n      this.errorMessage = '';\n\n      try {\n        const response = await this.authService.verifyMFA(\n          this.mfaForm.get('code')?.value,\n          this.rememberDevice\n        );\n\n        if (response.success) {\n          await this.navigateBasedOnGroup();\n        } else {\n          this.errorMessage = response.error || 'MFA verification failed';\n        }\n      } catch (error: any) {\n        this.errorMessage = error.message || 'MFA verification failed';\n      } finally {\n        this.isLoading = false;\n      }\n    } else {\n      this.markFormFieldsAsTouched(this.mfaForm);\n    }\n  }\n\n  private async navigateBasedOnGroup(): Promise<void> {\n    try {\n      console.info('Determining user group for navigation');\n      const userGroup = await this.authService.getUserGroup();\n      const groupRouteMap: { [key in UserGroup]: string } = {\n        [UserGroup.USER]: '/dashboard',\n        [UserGroup.CUSTOMER]: '/customer/dashboard',\n        [UserGroup.CLIENT]: '/client/dashboard',\n        [UserGroup.EMPLOYEES]: '/employees/dashboard',\n        [UserGroup.OWNER]: '/owner/dashboard'\n      };\n\n      const route = groupRouteMap[userGroup] || '/dashboard';\n      console.info('Navigating to route:', route, 'for group:', userGroup);\n      await this.router.navigate([route]);\n    } catch (error) {\n      console.error('Navigation error:', error);\n      this.errorMessage = 'Error determining user group';\n    }\n  }\n\n  private handleError(error: any): void {\n    if (error.code === 'UserNotConfirmedException') {\n      console.info('User not confirmed, redirecting to confirmation page');\n      this.router.navigate(['/confirm-signup'], {\n        queryParams: { username: this.signInForm.get('username')?.value }\n      });\n    } else {\n      this.errorMessage = error.message || 'An unexpected error occurred';\n    }\n  }\n\n  private markFormFieldsAsTouched(form: FormGroup): void {\n    Object.keys(form.controls).forEach(key => {\n      const control = form.get(key);\n      control?.markAsTouched();\n    });\n  }\n\n  toggleRememberDevice(): void {\n    this.rememberDevice = !this.rememberDevice;\n  }\n}\n"
    },
    {
      "source": "frontend/src/app/components/signin/signin.component.html",
      "document_content": "<div class=\"signin-container\">\n  <div class=\"logo-container\">\n    <img src=\"assets/onredboot-logo.jpg\" alt=\"OneRedBoot Logo\">\n  </div>\n\n  <!-- Initial Sign In Form -->\n  <form *ngIf=\"!needsMFA\" [formGroup]=\"signInForm\" (ngSubmit)=\"onSubmit()\" class=\"signin-form\">\n    <div class=\"form-group\">\n      <div class=\"input-container\">\n        <input\n          type=\"email\"\n          formControlName=\"username\"\n          placeholder=\"Email\"\n          class=\"form-input\"\n          [class.error]=\"signInForm.get('username')?.touched && signInForm.get('username')?.invalid\"\n          autocomplete=\"email\">\n      </div>\n      <div class=\"error-message\" *ngIf=\"signInForm.get('username')?.touched && signInForm.get('username')?.invalid\">\n        <span *ngIf=\"signInForm.get('username')?.errors?.['required']\">Email is required</span>\n        <span *ngIf=\"signInForm.get('username')?.errors?.['email']\">Invalid email format</span>\n      </div>\n    </div>\n\n    <div class=\"form-group\">\n      <div class=\"password-input-container\">\n        <input\n          [type]=\"passwordVisible ? 'text' : 'password'\"\n          formControlName=\"password\"\n          placeholder=\"Password\"\n          class=\"form-input\"\n          [class.error]=\"signInForm.get('password')?.touched && signInForm.get('password')?.invalid\"\n          autocomplete=\"current-password\">\n        <button\n          type=\"button\"\n          class=\"password-toggle\"\n          (click)=\"togglePasswordVisibility()\">\n          <span class=\"eye-icon\">\ud83d\udc41</span>\n        </button>\n      </div>\n      <div class=\"error-message\" *ngIf=\"signInForm.get('password')?.touched && signInForm.get('password')?.invalid\">\n        <span *ngIf=\"signInForm.get('password')?.errors?.['required']\">Password is required</span>\n        <span *ngIf=\"signInForm.get('password')?.errors?.['minlength']\">Password must be at least 8 characters</span>\n      </div>\n    </div>\n\n    <button\n      type=\"submit\"\n      class=\"submit-button\"\n      [disabled]=\"!signInForm.valid || isLoading\">\n      <span *ngIf=\"!isLoading\">Sign In</span>\n      <div class=\"loader\" *ngIf=\"isLoading\"></div>\n    </button>\n\n    <div class=\"form-links\">\n      <a routerLink=\"/forgot-password\" class=\"forgot-password\">Forgot Password?</a>\n      <div class=\"signup-prompt\">\n        Don't have an account? <a routerLink=\"/signup\">Sign Up</a>\n      </div>\n    </div>\n  </form>\n\n  <!-- MFA Verification Form -->\n  <form *ngIf=\"needsMFA\" [formGroup]=\"mfaForm\" (ngSubmit)=\"onSubmit()\" class=\"signin-form\">\n    <h2>Two-Factor Authentication</h2>\n    <p class=\"mfa-instructions\">\n      {{ mfaType === 'totp' ? 'Enter the code from your authenticator app' : 'Enter the code sent to your phone' }}\n    </p>\n\n    <div class=\"form-group\">\n      <div class=\"input-container\">\n        <input\n          type=\"text\"\n          formControlName=\"code\"\n          placeholder=\"Enter 6-digit code\"\n          class=\"form-input\"\n          [class.error]=\"mfaForm.get('code')?.touched && mfaForm.get('code')?.invalid\"\n          maxlength=\"6\"\n          autocomplete=\"one-time-code\">\n      </div>\n      <div class=\"error-message\" *ngIf=\"mfaForm.get('code')?.touched && mfaForm.get('code')?.invalid\">\n        <span *ngIf=\"mfaForm.get('code')?.errors?.['required']\">Code is required</span>\n        <span *ngIf=\"mfaForm.get('code')?.errors?.['pattern']\">Enter a valid 6-digit code</span>\n      </div>\n    </div>\n\n    <div class=\"remember-device\">\n      <label>\n        <input\n          type=\"checkbox\"\n          [checked]=\"rememberDevice\"\n          (change)=\"toggleRememberDevice()\">\n        Remember this device for 30 days\n      </label>\n    </div>\n\n    <button\n      type=\"submit\"\n      class=\"submit-button\"\n      [disabled]=\"!mfaForm.valid || isLoading\">\n      <span *ngIf=\"!isLoading\">Verify</span>\n      <div class=\"loader\" *ngIf=\"isLoading\"></div>\n    </button>\n  </form>\n\n  <!-- Error Message -->\n  <div class=\"error-banner\" *ngIf=\"errorMessage\">\n    {{ errorMessage }}\n  </div>\n</div>\n"
    },
    {
      "source": "frontend/src/app/components/home/home.component.html",
      "document_content": "<!-- home.component.html -->\n<div class=\"home-container\">\n  <header class=\"hero-section\">\n    <div class=\"logo-container\">\n      <img src=\"assets/onredboot-logo.jpg\" alt=\"OneRedBoot Logo\">\n      <h1>Integration Hub</h1>\n    </div>\n    <p class=\"hero-subtitle\">A comprehensive solution for payment processing, event management, and user authentication</p>\n    <div class=\"cta-buttons\">\n      <button (click)=\"navigateToSignup()\" class=\"primary-button\">Get Started</button>\n      <button (click)=\"navigateToSignin()\" class=\"primary-button\">Sign In</button>\n    </div>\n  </header>\n\n  <section class=\"features-section\">\n    <h2>Why Choose OneRedBoot?</h2>\n    <div class=\"features-grid\">\n      <div class=\"feature-card\">\n        <div class=\"feature-icon\">\ud83d\udcb3</div>\n        <h3>Multiple Payment Options</h3>\n        <p>Accept payments through Stripe, PayPal, Apple Pay, Google Pay, and more. Give your customers the flexibility they deserve.</p>\n      </div>\n\n      <div class=\"feature-card\">\n        <div class=\"feature-icon\">\ud83d\udd12</div>\n        <h3>Secure Authentication</h3>\n        <p>Enterprise-grade security with AWS Cognito, ensuring your data and transactions are always protected.</p>\n      </div>\n\n      <div class=\"feature-card\">\n        <div class=\"feature-icon\">\ud83d\udcc5</div>\n        <h3>Event Management</h3>\n        <p>Create, manage, and monetize events effortlessly. Handle registrations and payments in one place.</p>\n      </div>\n\n      <div class=\"feature-card\">\n        <div class=\"feature-icon\">\ud83d\udcca</div>\n        <h3>Analytics Dashboard</h3>\n        <p>Track transactions, monitor revenue, and gain insights with comprehensive reporting tools.</p>\n      </div>\n    </div>\n  </section>\n\n  <section class=\"integration-section\">\n    <h2>Easy Integration</h2>\n    <div class=\"integration-content\">\n      <div class=\"integration-text\">\n        <h3>Simple to Integrate, Powerful to Use</h3>\n        <ul class=\"integration-list\">\n          <li>Quick setup with your existing website</li>\n          <li>Comprehensive documentation</li>\n          <li>Developer-friendly APIs</li>\n          <li>Flexible configuration options</li>\n        </ul>\n      </div>\n      <div class=\"integration-image\">\n        <div class=\"code-preview\">\n          <pre>\n            <code>\n              // Example Integration\n              const payment = await oneRedBoot.createPayment(&#123;\n                amount: 1000,\n                currency: 'USD',\n                description: 'Event Registration'\n              &#125;);\n            </code>\n          </pre>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <section class=\"pricing-section\">\n    <h2>Transparent Pricing</h2>\n    <div class=\"pricing-cards\">\n      <div class=\"pricing-card\">\n        <h3>Starter</h3>\n        <p class=\"price\">2.9% + $0.30</p>\n        <p class=\"price-description\">per successful transaction</p>\n        <ul class=\"pricing-features\">\n          <li>Basic payment processing</li>\n          <li>Standard support</li>\n          <li>Basic analytics</li>\n        </ul>\n        <button (click)=\"navigateToSignup()\" class=\"primary-button\">Start Free</button>\n      </div>\n\n      <div class=\"pricing-card featured\">\n        <div class=\"featured-badge\">Popular</div>\n        <h3>Business</h3>\n        <p class=\"price\">2.5% + $0.25</p>\n        <p class=\"price-description\">per successful transaction</p>\n        <ul class=\"pricing-features\">\n          <li>Advanced payment options</li>\n          <li>Priority support</li>\n          <li>Detailed analytics</li>\n          <li>Event management tools</li>\n        </ul>\n        <button (click)=\"navigateToSignup()\" class=\"primary-button\">Get Started</button>\n      </div>\n\n      <div class=\"pricing-card\">\n        <h3>Enterprise</h3>\n        <p class=\"price\">Custom</p>\n        <p class=\"price-description\">tailored to your needs</p>\n        <ul class=\"pricing-features\">\n          <li>Custom integration</li>\n          <li>24/7 dedicated support</li>\n          <li>Advanced reporting</li>\n          <li>Custom features</li>\n        </ul>\n        <button (click)=\"navigateToSignup()\" class=\"secondary-button\">Contact Sales</button>\n      </div>\n    </div>\n  </section>\n\n  <section class=\"cta-section\">\n    <h2>Ready to Get Started?</h2>\n    <p>Join thousands of businesses that trust OneRedBoot for their payment needs</p>\n    <button (click)=\"navigateToSignup()\" class=\"primary-button\">Create Free Account</button>\n  </section>\n</div>\n"
    },
    {
      "source": "frontend/src/app/components/home/home.component.ts",
      "document_content": "// home.component.ts\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent {\n  constructor(private router: Router) {}\n\n  navigateToSignup() {\n    this.router.navigate(['/signup']);\n  }\n\n  navigateToSignin() {\n    this.router.navigate(['/signin']);\n  }\n}\n"
    },
    {
      "source": "frontend/src/app/components/signup/signup.component.html",
      "document_content": "<div class=\"signup-container\">\n  <div class=\"logo-container\">\n    <img src=\"assets/onredboot-logo.jpg\" alt=\"OneRedBoot Logo\">\n  </div>\n\n  <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"signup-form\">\n    <!-- Initial Signup -->\n    <ng-container *ngIf=\"currentStep === 0\">\n      <h2>Create Account</h2>\n\n      <div class=\"form-group\">\n        <input\n          type=\"email\"\n          formControlName=\"username\"\n          placeholder=\"Email address\"\n          class=\"form-input\"\n          [class.error]=\"form.get('username')?.touched && form.get('username')?.invalid\">\n\n        <div class=\"error-message\" *ngIf=\"form.get('username')?.touched && form.get('username')?.invalid\">\n          <span *ngIf=\"form.get('username')?.errors?.['required']\">Email is required</span>\n          <span *ngIf=\"form.get('username')?.errors?.['email']\">Invalid email format</span>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <div class=\"password-input-container\">\n          <input\n            [type]=\"passwordVisible ? 'text' : 'password'\"\n            formControlName=\"password\"\n            placeholder=\"Password\"\n            class=\"form-input\"\n            [class.error]=\"form.get('password')?.touched && form.get('password')?.invalid\">\n          <button\n            type=\"button\"\n            class=\"password-toggle\"\n            (click)=\"togglePasswordVisibility()\">\n            <span class=\"eye-icon\">\ud83d\udc41</span>\n          </button>\n        </div>\n\n        <div class=\"error-message\" *ngIf=\"form.get('password')?.touched && form.get('password')?.invalid\">\n          <span *ngIf=\"form.get('password')?.errors?.['required']\">Password is required</span>\n          <span *ngIf=\"form.get('password')?.errors?.['pattern']\">\n            Password must contain at least 8 characters, including uppercase, lowercase, numbers, and special characters\n          </span>\n        </div>\n      </div>\n\n      <div class=\"form-group\">\n        <h3>Choose Authentication Method</h3>\n        <div class=\"mfa-options\">\n          <div class=\"mfa-option\">\n            <input\n              type=\"radio\"\n              id=\"totp\"\n              formControlName=\"mfaType\"\n              [value]=\"MFAType.TOTP\">\n            <label for=\"totp\">\n              <span class=\"option-title\">Authenticator App</span>\n              <span class=\"option-description\">Use Google Authenticator, Authy, or similar apps</span>\n            </label>\n          </div>\n\n          <div class=\"mfa-option\">\n            <input\n              type=\"radio\"\n              id=\"sms\"\n              formControlName=\"mfaType\"\n              [value]=\"MFAType.SMS\">\n            <label for=\"sms\">\n              <span class=\"option-title\">SMS Authentication</span>\n              <span class=\"option-description\">Receive codes via text message</span>\n            </label>\n          </div>\n        </div>\n\n        <div *ngIf=\"form.get('mfaType')?.value === MFAType.SMS\" class=\"phone-input\">\n          <input\n            type=\"tel\"\n            formControlName=\"phoneNumber\"\n            placeholder=\"Phone number (+1234567890)\"\n            class=\"form-input\"\n            [class.error]=\"form.get('phoneNumber')?.touched && form.get('phoneNumber')?.invalid\">\n\n          <div class=\"error-message\" *ngIf=\"form.get('phoneNumber')?.touched && form.get('phoneNumber')?.invalid\">\n            <span *ngIf=\"form.get('phoneNumber')?.errors?.['required']\">Phone number is required for SMS authentication</span>\n            <span *ngIf=\"form.get('phoneNumber')?.errors?.['pattern']\">Please enter a valid phone number (+1234567890)</span>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n\n    <!-- MFA Setup -->\n    <ng-container *ngIf=\"currentStep === 1\">\n      <h2>Set Up Two-Factor Authentication</h2>\n      <p class=\"mfa-instructions\">Scan this QR code with your authenticator app:</p>\n\n      <div class=\"qr-container\">\n        <img [src]=\"qrCode\" alt=\"QR Code for authenticator setup\" *ngIf=\"qrCode\">\n      </div>\n\n      <div class=\"secret-key-container\">\n        <p>Or manually enter this code in your authenticator app:</p>\n        <code class=\"secret-key\">{{ secretKey }}</code>\n      </div>\n\n      <div class=\"form-group\">\n        <input\n          type=\"text\"\n          formControlName=\"mfaCode\"\n          placeholder=\"Enter 6-digit code\"\n          class=\"form-input\"\n          maxlength=\"6\"\n          [class.error]=\"form.get('mfaCode')?.touched && form.get('mfaCode')?.invalid\">\n\n        <div class=\"error-message\" *ngIf=\"form.get('mfaCode')?.touched && form.get('mfaCode')?.invalid\">\n          <span *ngIf=\"form.get('mfaCode')?.errors?.['pattern']\">Enter a valid 6-digit code</span>\n        </div>\n      </div>\n    </ng-container>\n\n    <!-- Email Verification -->\n    <ng-container *ngIf=\"currentStep === 2\">\n      <h2>Verify Your Email</h2>\n      <p>Enter the verification code sent to your email</p>\n\n      <div class=\"form-group\">\n        <input\n          type=\"text\"\n          formControlName=\"verificationCode\"\n          placeholder=\"Enter verification code\"\n          class=\"form-input\"\n          maxlength=\"6\"\n          [class.error]=\"form.get('verificationCode')?.touched && form.get('verificationCode')?.invalid\">\n\n        <div class=\"error-message\" *ngIf=\"form.get('verificationCode')?.touched && form.get('verificationCode')?.invalid\">\n          <span *ngIf=\"form.get('verificationCode')?.errors?.['pattern']\">Enter a valid 6-digit code</span>\n        </div>\n      </div>\n    </ng-container>\n\n    <!-- Error Message -->\n    <div class=\"error-banner\" *ngIf=\"error\">\n      {{ error }}\n    </div>\n\n    <!-- Submit Button -->\n    <button\n      type=\"submit\"\n      class=\"submit-button\"\n      [disabled]=\"!isStepValid() || isLoading\">\n      <span *ngIf=\"!isLoading\">\n        {{ currentStep === 0 ? 'Create Account' :\n        currentStep === 1 ? 'Verify MFA' :\n          'Complete Registration' }}\n      </span>\n      <div class=\"loader\" *ngIf=\"isLoading\"></div>\n    </button>\n\n    <!-- Sign In Link -->\n    <div class=\"form-links\">\n      <div class=\"signin-prompt\">\n        Already have an account? <a routerLink=\"/signin\">Sign In</a>\n      </div>\n    </div>\n  </form>\n</div>\n"
    },
    {
      "source": "frontend/src/app/components/signup/signup.component.ts",
      "document_content": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { AuthService } from '../../services/auth.service';\nimport QRCode from 'qrcode';\n\nenum SignupStep {\n  INITIAL,\n  MFA_SETUP,\n  VERIFY\n}\n\nexport enum MFAType {\n  TOTP = 'TOTP',\n  SMS = 'SMS'\n}\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n  styleUrls: ['./signup.component.scss']\n})\nexport class SignUpComponent implements OnInit, OnDestroy {\n  currentStep = SignupStep.INITIAL;\n  form: FormGroup;\n  isLoading = false;\n  error = '';\n  qrCode = '';\n  secretKey = '';\n  username = '';\n  passwordVisible = false;\n  private destroy$ = new Subject<void>();\n  public MFAType = MFAType; // Changed from abcType to MFAType for clarity\n\n  constructor(\n    private fb: FormBuilder,\n    private auth: AuthService,\n    private router: Router\n  ) {\n    this.form = this.fb.group({\n      username: ['', [Validators.required, Validators.email]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/)\n      ]],\n      mfaType: [MFAType.TOTP],  // Changed from mfaCode to mfaType\n      mfaCode: [''],  // Add this for the verification code input\n      verificationCode: ['', [Validators.pattern(/^\\d{6}$/)]],\n      phoneNumber: ['']\n    });\n\n    // Monitor MFA type changes\n    this.form.get('mfaType')?.valueChanges.subscribe(type => {\n      console.info('MFA type changed:', type);\n      const phoneControl = this.form.get('phoneNumber');\n      if (type === MFAType.SMS) {\n        phoneControl?.setValidators([Validators.required, Validators.pattern(/^\\+[1-9]\\d{1,14}$/)]);\n      } else {\n        phoneControl?.clearValidators();\n      }\n      phoneControl?.updateValueAndValidity();\n    });\n  }\n\n  ngOnInit(): void {\n    this.auth.isAuthenticated$()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(isAuth => {\n        if (isAuth) this.router.navigate(['/dashboard']);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  async onSubmit(): Promise<void> {\n    if (this.isLoading || !this.form.valid) return;\n\n    this.isLoading = true;\n    this.error = '';\n\n    try {\n      switch (this.currentStep) {\n        case SignupStep.INITIAL:\n          await this.handleInitialSignup();\n          break;\n        case SignupStep.MFA_SETUP:\n          await this.handleMfaSetup();\n          break;\n        case SignupStep.VERIFY:\n          await this.handleVerification();\n          break;\n      }\n    } catch (err) {\n      console.error('Signup error:', err);\n      this.error = err instanceof Error ? err.message : 'An error occurred';\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  private async handleInitialSignup(): Promise<void> {\n    const { username, password, mfaType } = this.form.value;\n    console.info('Starting registration with MFA type:', mfaType);\n\n    const response = await this.auth.register(username, password, username);\n\n    if (response.success) {\n      this.username = username;\n      if (mfaType === MFAType.TOTP) {\n        await this.setupTOTP();\n      } else {\n        this.currentStep = SignupStep.VERIFY;\n      }\n    } else {\n      this.error = response.error || 'Registration failed';\n    }\n  }\n\n  private async setupTOTP(): Promise<void> {\n    console.info('Setting up TOTP');\n    const response = await this.auth.setupTOTP();\n\n    if (response.success && response.setupDetails) {\n      this.secretKey = response.setupDetails.secretKey || '';\n      this.qrCode = await this.generateQRCode(response.setupDetails.qrCode || '');\n      this.currentStep = SignupStep.MFA_SETUP;\n      this.form.get('mfaCode')?.setValidators([\n        Validators.required,\n        Validators.pattern(/^\\d{6}$/)\n      ]);\n      this.form.get('mfaCode')?.updateValueAndValidity();\n    } else {\n      this.error = response.error || 'MFA setup failed';\n    }\n  }\n\n  private async handleMfaSetup(): Promise<void> {\n    if (!this.form.get('mfaCode')?.valid) return;\n\n    console.info('Verifying MFA setup');\n    const response = await this.auth.verifyMFA(\n      this.form.get('mfaCode')?.value,\n      false\n    );\n\n    if (response.success) {\n      this.currentStep = SignupStep.VERIFY;\n      this.form.get('verificationCode')?.setValidators([\n        Validators.required,\n        Validators.pattern(/^\\d{6}$/)\n      ]);\n      this.form.get('verificationCode')?.updateValueAndValidity();\n    } else {\n      this.error = response.error || 'MFA verification failed';\n    }\n  }\n\n  private async handleVerification(): Promise<void> {\n    const { verificationCode, mfaCode } = this.form.value;\n\n    console.info('Confirming registration');\n    const response = await this.auth.confirmRegistration(\n      this.username,\n      verificationCode,\n      mfaCode\n    );\n\n    if (response.success) {\n      await this.router.navigate(['/signin']);\n    } else {\n      this.error = response.error || 'Verification failed';\n    }\n  }\n\n  togglePasswordVisibility(): void {\n    this.passwordVisible = !this.passwordVisible;\n  }\n\n  isStepValid(): boolean {\n    const usernameControl = this.form.get('username');\n    const passwordControl = this.form.get('password');\n    const mfaControl = this.form.get('mfaCode');\n    const verificationControl = this.form.get('verificationCode');\n    const phoneControl = this.form.get('phoneNumber');\n    const mfaType = this.form.get('mfaType')?.value;\n\n    switch (this.currentStep) {\n      case SignupStep.INITIAL:\n        if (mfaType === MFAType.SMS) {\n          return !!(usernameControl?.valid && passwordControl?.valid && phoneControl?.valid);\n        }\n        return !!(usernameControl?.valid && passwordControl?.valid);\n      case SignupStep.MFA_SETUP:\n        return !!mfaControl?.valid;\n      case SignupStep.VERIFY:\n        return !!verificationControl?.valid;\n      default:\n        return false;\n    }\n  }\n\n  async generateQRCode(data: string): Promise<string> {\n    try {\n      return await QRCode.toDataURL(data);\n    } catch (err) {\n      console.error('Error generating QR code:', err);\n      return '';\n    }\n  }\n\n}\n"
    },
    {
      "source": "frontend/src/app/services/auth.service.ts",
      "document_content": "import { Injectable } from '@angular/core';\nimport {\n  fetchAuthSession,\n  ConfirmSignUpOutput,\n  SignUpInput,\n  SignUpOutput,\n  signUp,\n  signIn,\n  signOut,\n  confirmSignUp,\n  resendSignUpCode,\n  ResendSignUpCodeInput,\n  confirmSignIn,\n  setUpTOTP\n} from 'aws-amplify/auth';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport {User, UserGroup} from '../models/user.model';\nimport { generateClient, GraphQLResult } from 'aws-amplify/api';\nimport { getUserProfileQuery } from '../graphql/queries';\n\nclass AuthError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'AuthError';\n  }\n}\n\ninterface GetUserProfileResult {\n  getUserProfile: User | null;\n}\n\nexport interface AuthResponse {\n  success: boolean;\n  user?: User;\n  error?: string;\n  needsMFA?: boolean;\n  mfaType?: 'sms' | 'totp';\n  setupDetails?: {\n    qrCode: string;  // Changed from URL to string\n    secretKey: string;\n  };\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject: BehaviorSubject<User | null>;\n  private isAuthenticatedSubject: BehaviorSubject<boolean>;\n  public currentUser: Observable<User | null>;\n  public isAuthenticated: Observable<boolean>;\n  private amplifyClient = generateClient();\n\n  constructor() {\n    this.currentUserSubject = new BehaviorSubject<User | null>(null);\n    this.isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\n    this.currentUser = this.currentUserSubject.asObservable();\n    this.isAuthenticated = this.isAuthenticatedSubject.asObservable();\n    this.checkAuthState();\n  }\n\n  private async checkAuthState(): Promise<void> {\n    try {\n      const session = await fetchAuthSession();\n      const tokens = session.tokens;\n\n      if (!tokens?.idToken?.payload) {\n        this.isAuthenticatedSubject.next(false);\n        return;\n      }\n\n      this.isAuthenticatedSubject.next(true);\n      const cognitoId = tokens.idToken.payload.sub;\n\n      if (!cognitoId) return;\n\n      await this.refreshUserProfile(cognitoId);\n    } catch (error) {\n      console.error('Auth state error:', error);\n      this.isAuthenticatedSubject.next(false);\n      this.currentUserSubject.next(null);\n    }\n  }\n\n  private async refreshUserProfile(cognitoId: string): Promise<void> {\n    try {\n      const result = await this.amplifyClient.graphql<GraphQLResult<GetUserProfileResult>>({\n        query: getUserProfileQuery,\n        variables: { cognito_id: cognitoId }\n      });\n\n      if ('data' in result && result.data?.getUserProfile) {\n        this.currentUserSubject.next(result.data.getUserProfile);\n      }\n    } catch (error) {\n      console.error('Profile refresh error:', error);\n    }\n  }\n\n  public isAuthenticated$(): Observable<boolean> {\n    return this.isAuthenticated;\n  }\n\n  public async checkIsAuthenticated(): Promise<boolean> {\n    try {\n      const session = await fetchAuthSession();\n      const isAuth = !!session.tokens;\n      this.isAuthenticatedSubject.next(isAuth);\n      return isAuth;\n    } catch {\n      this.isAuthenticatedSubject.next(false);\n      return false;\n    }\n  }\n\n  public async getUserGroup(): Promise<UserGroup> {\n    try {\n      const session = await fetchAuthSession();\n      const payload = session.tokens?.idToken?.payload;\n\n      if (!payload) {\n        throw new AuthError('No authenticated user found');\n      }\n\n      // Check for cognito:groups in the token\n      const groups = payload['cognito:groups'] as string[] || [];\n      console.log('User groups:', groups);\n\n      // Map Cognito groups to UserGroup\n      if (groups.includes('Owner')) return UserGroup.OWNER;\n      if (groups.includes('Employees')) return UserGroup.EMPLOYEES;\n      if (groups.includes('Client')) return UserGroup.CLIENT;\n      if (groups.includes('Customer')) return UserGroup.CUSTOMER;\n      if (groups.includes('User')) return UserGroup.USER;\n\n      // Default to User if no specific group found but user is authenticated\n      return UserGroup.USER;\n    } catch (error) {\n      console.error('Error getting user group:', error);\n      throw error;\n    }\n  }\n\n  async register(username: string, password: string, email: string): Promise<AuthResponse> {\n    try {\n      // Just handle the initial signup\n      await signUp({\n        username,\n        password,\n        options: { userAttributes: { email } }\n      });\n\n      return {\n        success: true,\n        needsMFA: false // We'll set up MFA after confirmation\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Registration failed'\n      };\n    }\n  }\n\n// Add a new method for setting up TOTP after sign-in\n  async setupTOTP(): Promise<AuthResponse> {\n    try {\n      const totpSetup = await setUpTOTP();\n      const setupDetails = totpSetup as any;\n\n      return {\n        success: true,\n        needsMFA: true,\n        setupDetails: {\n          qrCode: setupDetails.qrCode,\n          secretKey: setupDetails.secretKey\n        }\n      };\n    } catch (error) {\n      console.error('TOTP setup error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'MFA setup failed'\n      };\n    }\n  }\n\n  async confirmRegistration(username: string, code: string, mfaCode: string): Promise<AuthResponse> {\n    try {\n      // Just confirm the registration first\n      await confirmSignUp({ username, confirmationCode: code });\n\n      return {\n        success: true\n      };\n\n    } catch (error) {\n      console.error('Confirmation error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Confirmation failed'\n      };\n    }\n  }\n\n  async signIn(username: string, password: string): Promise<AuthResponse> {\n    try {\n      console.info('Starting sign in process for:', username);\n      const signInResult = await signIn({ username, password });\n      console.debug('Sign in result:', signInResult);\n      const nextStep = signInResult.nextStep.signInStep;\n      console.debug('Next step:', nextStep);\n\n      if (nextStep === 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP') {\n        console.info('TOTP setup required');\n        const totpSetupDetails = signInResult.nextStep.totpSetupDetails;\n\n        // Convert the QR code URI to a string\n        const qrCodeUri = totpSetupDetails.getSetupUri(\n          'OneRedBoot Integration Hub',\n          username\n        ).toString();  // Added toString()\n\n        return {\n          success: false,\n          needsMFA: true,\n          mfaType: 'totp',\n          setupDetails: {\n            qrCode: qrCodeUri,\n            secretKey: totpSetupDetails.sharedSecret\n          }\n        };\n      }\n\n      if (nextStep === 'CONFIRM_SIGN_IN_WITH_TOTP_CODE') {\n        return {\n          success: false,\n          needsMFA: true,\n          mfaType: 'totp'\n        };\n      }\n\n      if (nextStep === 'CONFIRM_SIGN_IN_WITH_SMS_CODE') {\n        return {\n          success: false,\n          needsMFA: true,\n          mfaType: 'sms'\n        };\n      }\n\n      if (nextStep === 'DONE') {\n        console.info('Sign in completed');\n        return {\n          success: true\n        };\n      }\n\n      // Default return for any other nextStep value\n      return {\n        success: false,\n        error: `Authentication requires: ${nextStep}`\n      };\n\n    } catch (error) {\n      console.error('Sign in error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Sign in failed'\n      };\n    }\n  }\n\n  async verifyMFA(code: string, rememberDevice = false): Promise<AuthResponse> {\n    try {\n      console.info('Verifying MFA code');\n      const result = await confirmSignIn({\n        challengeResponse: code,\n        options: { rememberDevice }\n      });\n      console.debug('MFA verification result:', result);\n\n      if (result.isSignedIn) {\n        console.info('MFA verification successful');\n        await this.checkAuthState();\n        return {\n          success: true,\n          user: this.currentUserSubject.value || undefined\n        };\n      }\n\n      return {\n        success: false,\n        error: 'MFA verification failed'\n      };\n    } catch (error) {\n      console.error('MFA verification error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'MFA verification failed'\n      };\n    }\n  }\n\n  async signOut(): Promise<void> {\n    try {\n      await signOut();\n      this.currentUserSubject.next(null);\n      this.isAuthenticatedSubject.next(false);\n    } catch (error) {\n      console.error('Sign out error:', error);\n      throw new AuthError(error instanceof Error ? error.message : 'Sign out failed');\n    }\n  }\n\n  async resendConfirmationCode(username: string): Promise<AuthResponse> {\n    try {\n      await resendSignUpCode({ username });\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Code resend error:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Failed to resend code'\n      };\n    }\n  }\n}\n"
    },
    {
      "source": "frontend/src/app/guards/auth.guard.ts",
      "document_content": "import { CanActivateFn } from '@angular/router';\n\nexport const authGuard: CanActivateFn = (route, state) => {\n  return true;\n};\n"
    },
    {
      "source": "context/structure.md",
      "document_content": "orb-integration-hub/\n\u2502\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u251c\u2500\u2500 deploy-backend.yml\n\u2502       \u2514\u2500\u2500 deploy-frontend.yml\n\u2502\n\u251c\u2500\u2500 ai/\n\u2502   \u251c\u2500\u2500 context.ai\n\u2502   \u251c\u2500\u2500 correct.ai\n\u2502   \u251c\u2500\u2500 start.ai\n\u2502   \u251c\u2500\u2500 state.ai\n\u2502   \u2514\u2500\u2500 stop.ai\n\u2502\n\u251c\u2500\u2500 assets/\n\u2502   \u2514\u2500\u2500 stripe-payment-flow.png\n\u2502\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u2502   \u2514\u2500\u2500 lambdas/\n\u2502   \u2502       \u251c\u2500\u2500 paypal/\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 index.py\n\u2502   \u2502       \u251c\u2500\u2500 square/\n\u2502   \u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2502       \u2502   \u2514\u2500\u2500 index.py\n\u2502   \u2502       \u2514\u2500\u2500 stripe/\n\u2502   \u2502           \u251c\u2500\u2500 __init__.py\n\u2502   \u2502           \u2514\u2500\u2500 index.py\n\u2502   \u251c\u2500\u2500 Pipfile\n\u2502   \u2514\u2500\u2500 Pipfile.lock\n\u2502\n\u251c\u2500\u2500 docs/\n\u2502\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 public/\n\u2502   \u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2502   \u251c\u2500\u2500 manifest.json\n\u2502   \u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u2502   \u2514\u2500\u2500 robots.txt\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 src/\n\u2502       \u251c\u2500\u2500 components/\n\u2502       \u2502   \u251c\u2500\u2500 AuthForms.css\n\u2502       \u2502   \u251c\u2500\u2500 ConfirmSignUp.js\n\u2502       \u2502   \u251c\u2500\u2500 Layout.js\n\u2502       \u2502   \u251c\u2500\u2500 Layout.module.css\n\u2502       \u2502   \u251c\u2500\u2500 Layout.test.js\n\u2502       \u2502   \u251c\u2500\u2500 Navigation.js\n\u2502       \u2502   \u251c\u2500\u2500 Navigation.module.css\n\u2502       \u2502   \u251c\u2500\u2500 Navigation.test.js\n\u2502       \u2502   \u251c\u2500\u2500 PaymentMethods.js\n\u2502       \u2502   \u251c\u2500\u2500 SignIn.js\n\u2502       \u2502   \u2514\u2500\u2500 SignUp.js\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 contexts/\n\u2502       \u2502   \u2514\u2500\u2500 AuthContext.js\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 environments/\n\u2502       \u2502   \u2514\u2500\u2500 .env\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 pages/\n\u2502       \u2502   \u251c\u2500\u2500 Administrator.js\n\u2502       \u2502   \u251c\u2500\u2500 Checkout.js\n\u2502       \u2502   \u251c\u2500\u2500 Checkout.module.css\n\u2502       \u2502   \u251c\u2500\u2500 Client.js\n\u2502       \u2502   \u251c\u2500\u2500 Developer.js\n\u2502       \u2502   \u251c\u2500\u2500 Home.js\n\u2502       \u2502   \u251c\u2500\u2500 Home.test.js\n\u2502       \u2502   \u251c\u2500\u2500 Owner.js\n\u2502       \u2502   \u2514\u2500\u2500 PaymentConfirmation.js\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 services/\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 utils/\n\u2502       \u2502\n\u2502       \u251c\u2500\u2500 App.css\n\u2502       \u251c\u2500\u2500 App.js\n\u2502       \u251c\u2500\u2500 aws-exports.js\n\u2502       \u251c\u2500\u2500 index.css\n\u2502       \u251c\u2500\u2500 index.js\n\u2502       \u251c\u2500\u2500 reportWebVitals.js\n\u2502       \u2514\u2500\u2500 setupTests.js\n\u2502\n\u251c\u2500\u2500 infrastructure/\n\u2502   \u251c\u2500\u2500 cloudformation/\n\u2502   \u2502   \u251c\u2500\u2500 appsync.yml\n\u2502   \u2502   \u251c\u2500\u2500 bootstrap.yml\n\u2502   \u2502   \u251c\u2500\u2500 cognito.yml\n\u2502   \u2502   \u251c\u2500\u2500 dynamodb.yml\n\u2502   \u2502   \u2514\u2500\u2500 lambda.yml\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 scripts/\n\u2502\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 pyproject.toml\n\u2514\u2500\u2500 README.md"
    },
    {
      "source": "context/start.md",
      "document_content": "I am going to provide you a context for the project.  All decisions and recommendations I want vetted against this context\n\nI am using Claude.ai with Claude project name \"OneRedBoot.com Payment Gateway Development\"\nbut the actual code base has been renamed to github repo \"org-integration-hub\" \"Integration Hub\"\n\nDo you understand? Answer only Yes or No."
    },
    {
      "source": "context/state.md",
      "document_content": "As a part of the context please understand I have all the files defined under current progress so when I ask for the\nnext step if you need to see a file just ask for it."
    },
    {
      "source": "context/stop.md",
      "document_content": "Please provide the complete context for the project with updated sections for tasks completed, next steps, and any current issues.  Also please provide the current project structure in a format it was given"
    },
    {
      "source": "context/project.md",
      "document_content": "# Project: org-integration-hub (Title: OneRedBoot.com Payment Gateway)\n\n## Technology Stack\n- Frontend: Angular 18\n- Backend: AWS services (AppSync, Cognito, DynamoDB, Lambda, Step Functions)\n- Monitoring and Logging: CloudWatch\n- Infrastructure as Code: CloudFormation\n- Payment processors: Stripe (primary), with plans to add PayPal, Apple Pay, Google Pay, and others\n- Authentication: Cognito with Amplify (future plans to add Auth0 and others)\n- Backend language: Python 3.12\n- Version control: GitHub\n- CI/CD: GitHub Actions\n\n## Authentication and Authorization Structure\n\n### Cognito Groups\nBasic authentication groups in Cognito:\n- User: Base group that all other groups extend from\n- Customer: End-users making purchases through client websites\n- Client: Customers using the integration hub service for transactions\n- Employees: Internal staff (developers, administrators, support)\n- Owner: Root-level system access\n\n### DynamoDB Roles Table\nThe roles table in DynamoDB manages fine-grained permissions and role assignments:\n\n#### Schema\n```\n{\n  roleId: string (Primary Key),\n  applicationId: string (Sort Key),\n  roleName: string,\n  roleType: string (Employee|Client|Customer|Owner),\n  permissions: Array<string>,\n  createdAt: timestamp,\n  updatedAt: timestamp,\n  active: boolean\n}\n```\n\n#### Employee Role Types\nFor the Employee cognito group, roles are:\n- Developer: System development and maintenance\n- Administrator: System configuration and user management\n- Support: Customer service and issue resolution\n- Sales: Client account management\n\n#### Role-Application Mapping\n- Each role is associated with one or more applicationIds\n- Applications represent different systems/websites using the integration hub\n- Roles can have different permissions across applications\n\n### JWT Claims Structure\nCustom claims added to JWT tokens:\n```json\n{\n  \"applicationRoles\": [\"role1\", \"role2\"],\n  \"cognitoGroup\": \"string\",\n  \"permissions\": [\"permission1\", \"permission2\"],\n  \"tenantId\": \"string\",\n  \"applicationId\": \"string\"\n}\n```\n\n### Role Permissions\n\n#### Customer Role\n- Register for events\n- Make payments\n- View own transaction history\n- Manage profile\n- View event details\n\n#### Client Role\n- Create and manage events\n- Process payments\n- View transaction reports\n- Manage customer accounts\n- Configure payment methods\n- Access analytics dashboard\n\n#### Employee Roles Hierarchy and Permissions\n\n##### Developer\n- Access development environments\n- View logs and metrics\n- Debug customer issues\n- Deploy updates\n- Manage client configurations\n\n##### Administrator (includes Developer permissions plus)\n- Manage developer accounts\n- Configure system settings\n- Access all environments\n- View audit logs\n- Manage client organizations\n\n##### Support\n- View customer accounts\n- Handle customer issues\n- Access support tools\n- View transaction logs\n- Generate reports\n\n##### Sales\n- View client accounts\n- Access pricing tools\n- Generate client reports\n- View usage analytics\n\n#### Owner Role\n- Full system access\n- Manage administrator accounts\n- Access all features and environments\n- View system-wide analytics\n- Configure global settings\n\n### Multi-Application Support\nThe system supports multiple applications through:\n\n#### Application Registration\n```json\n{\n  \"applicationId\": \"string\",\n  \"name\": \"string\",\n  \"domain\": \"string\",\n  \"settings\": {\n    \"paymentMethods\": [\"stripe\", \"paypal\"],\n    \"features\": [\"events\", \"payments\", \"subscriptions\"]\n  },\n  \"apiKeys\": {\n    \"public\": \"string\",\n    \"private\": \"string\"\n  }\n}\n```\n\n#### Application Isolation\n- Each application has its own set of:\n    - API keys\n    - Configuration settings\n    - User roles\n    - Event types\n    - Payment methods\n\n## UI/UX Specifications\n\n### Design Principles\n- Simple and intuitive interface\n- OneRedBoot brand colors\n- Responsive layout\n- Reusable components\n- Role-based organization\n\n### Component Structure\nRole-based UI organization:\n- User: Basic authentication and profile components\n- Customer: Event and payment interfaces\n- Client: Management and reporting dashboards\n- Internal (Employees): Administrative interfaces\n\n### Naming Conventions\n- Angular Components: PascalCase (e.g., SignupComponent)\n- TypeScript files: camelCase\n- Python files and functions: snake_case\n\n## Development Approach\n- Step-by-step development\n- Microservice architecture\n- Regular testing and validation\n- Continuous integration/deployment\n\n## Deployment Strategy\n- GitHub Actions for CI/CD\n- Separate development and production pipelines\n- Automated testing before deployment\n\n## Project Description\nA comprehensive integration hub providing:\n- Payment processing with multiple providers\n- Event management and registration\n- User authentication and authorization\n- Client and customer management\n- Analytical reporting\n\n## Completed Tasks\n1. Set up Angular 18 project structure\n2. Installed necessary dependencies including AWS Amplify\n3. Created basic components for signup, signin, and confirm-signup\n4. Implemented AuthService with Cognito integration\n5. Set up basic routing\n6. Configured testing environment with Karma and Jasmine\n7. Implemented the auth service (AuthService) with:\n    - User registration (registerUser)\n    - Registration confirmation (confirmRegistration)\n    - User authentication (authenticateUser)\n    - User logout (logoutUser)\n8. Integrated Amplify's GraphQL client for user profiles\n9. Implemented error handling and logging\n10. Created custom error types\n11. Project scope expansion evaluation\n12. Implement signin component logic\n13. Create and implement signup component\n14. Create and implement confirm-signup component\n15. Set up protected routes using AuthGuard\n16. Implemented context-generator\n17. Configure MFA in Cognito User Pool:\n    - Enable MFA settings\n    - Configure TOTP options\n    - Configure device tracking\n18. Update AuthService for MFA:\n    - Simplified implementation\n    - Setup and verification methods\n    - Device tracking\n19. Create MFA Registration Flow:\n    - Updated signup component\n    - MFA setup interface\n    - Verification flow\n20. Update sign-in for MFA verification\n21. Implement authentication error handling\n22. Begin Lambda integration\n23. Set up CI/CD pipelines\n\n## Next Steps\n24. Start Stripe payment processing\n25. Update AppSync API for user profiles\n26. Test authentication flow\n27. Implement profile management\n28. Add payment processors\n29. Enhance MFA Security:\n    - Rate limiting\n    - Bypass protection\n    - Device token storage\n    - Audit logging\n30. Test MFA Implementation:\n    - Unit testing\n    - Integration testing\n    - Device remembrance\n    - Documentation updates\n\n## Current Issues\nNo current issues reported."
    },
    {
      "source": "backend/infrastructure/cloudformation/cognito.yml",
      "document_content": "# --------------------------------------------------- #\nAWSTemplateFormatVersion: 2010-09-09\n\n# --------------------------------------------------- #\nTransform: AWS::Serverless-2016-10-31\n\n# --------------------------------------------------- #\nDescription: >\n  Application Infrastructure - Cognito Stack\n\n# --------------------------------------------------- #\nParameters:\n  Environment:\n    Default: dev\n    Type: String\n  ExpirationInDays:\n    Default: 14\n    Type: String\n  CustomerId:\n    Default: orb\n    Type: String\n  ProjectId:\n    Default: integration-hub\n    Type: String\n  TracingIs:\n    Default: Active\n    Type: String\n\n# --------------------------------------------------- #\nGlobals:\n  Function:\n    DeadLetterQueue:\n      TargetArn: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue-arn}}'\n      Type: SNS\n    Environment:\n      Variables:\n        ALERTS_QUEUE: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-alerts-queue-arn}}'\n        LOGGING_LEVEL: INFO\n        VERSION: 1\n    Handler: index.lambda_handler\n    MemorySize: 256\n    Runtime: python3.12\n    Tags:\n      Billable: true\n      CustomerId: !Ref CustomerId\n      Environment: !Ref Environment\n      ProjectId: !Ref ProjectId\n    Timeout: 30\n\n# --------------------------------------------------- #\nResources:\n  UserPool:\n    Type: AWS::Cognito::UserPool\n    Properties:\n      AdminCreateUserConfig:\n        AllowAdminCreateUserOnly: false\n        InviteMessageTemplate:\n          EmailMessage: !Sub |\n            Your account for ${CustomerId}-${ProjectId}-${Environment} has been created.\n            Your username is {username} and temporary password is {####}.\n            Please login from here: https://ai-repository.oneredboot.com/authenticate/\n          EmailSubject: !Sub |\n            Your temporary password for ${CustomerId}-${ProjectId}-${Environment}\n      AutoVerifiedAttributes:\n        - email\n        - phone_number\n      LambdaConfig:\n        PostConfirmation: !GetAtt PostUserConfirmationTrigger.Arn\n      MfaConfiguration: 'ON'\n      DeviceConfiguration:\n        ChallengeRequiredOnNewDevice: true\n        DeviceOnlyRememberedOnUserPrompt: true\n      SmsAuthenticationMessage: 'Your authentication code is {####}'\n      EnabledMfas:\n        - 'SOFTWARE_TOKEN_MFA'\n        - 'SMS_MFA'\n      UserPoolName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-user-pool\"\n      Policies:\n        PasswordPolicy:\n          MinimumLength: 8\n          RequireLowercase: true\n          RequireNumbers: true\n          RequireSymbols: true\n          RequireUppercase: true\n          TemporaryPasswordValidityDays: 7\n      Schema:\n        - Name: email\n          AttributeDataType: String\n          Mutable: true\n          Required: true\n        - Name: phone_number\n          AttributeDataType: String\n          Mutable: true\n          Required: false\n      SmsConfiguration:\n        ExternalId: !Sub \"${CustomerId}-${ProjectId}-${Environment}-cognito-sms\"\n        SnsCallerArn: !GetAtt CognitoSMSRole.Arn\n\n  # Define Cognito Groups\n  UserGroup:\n    Type: AWS::Cognito::UserPoolGroup\n    Properties:\n      GroupName: User\n      UserPoolId: !Ref UserPool\n      Description: Base group for all users\n\n  CustomerGroup:\n    Type: AWS::Cognito::UserPoolGroup\n    Properties:\n      GroupName: Customer\n      UserPoolId: !Ref UserPool\n      Description: Group for end-users making purchases\n\n  ClientGroup:\n    Type: AWS::Cognito::UserPoolGroup\n    Properties:\n      GroupName: Client\n      UserPoolId: !Ref UserPool\n      Description: Group for customers using the integration hub service\n\n  EmployeesGroup:\n    Type: AWS::Cognito::UserPoolGroup\n    Properties:\n      GroupName: Employees\n      UserPoolId: !Ref UserPool\n      Description: Group for internal staff\n\n  OwnerGroup:\n    Type: AWS::Cognito::UserPoolGroup\n    Properties:\n      GroupName: Owner\n      UserPoolId: !Ref UserPool\n      Description: Group for root-level system access\n\n  # Identity Pool\n  IdentityPool:\n    Properties:\n      AllowUnauthenticatedIdentities: false\n      CognitoIdentityProviders:\n        - ClientId:\n            Ref: UserPoolClient\n          ProviderName: !GetAtt UserPool.ProviderName\n      IdentityPoolName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-identity-pool\"\n    Type: AWS::Cognito::IdentityPool\n\n  # [Previous resources remain unchanged]\n  IdentityPoolRoles:\n    Properties:\n      IdentityPoolId: !Ref IdentityPool\n      Roles:\n        authenticated: !GetAtt AuthorizedRole.Arn\n      RoleMappings:\n        UserPool:\n          IdentityProvider: !Join\n            - \"\"\n            - - !Sub \"cognito-idp.${AWS::Region}.amazonaws.com/\"\n              - !Ref UserPool\n              - \":\"\n              - !Ref UserPoolClient\n          AmbiguousRoleResolution: AuthenticatedRole\n          Type: Token\n    Type: AWS::Cognito::IdentityPoolRoleAttachment\n\n  PostUserConfirmationTrigger:\n    Properties:\n      Description: Watches for new user created and assigns a default user group\n      FunctionName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-PostUserConfirmationTrigger\"\n      InlineCode: |\n        import json\n        import boto3\n        \n        client = boto3.client('cognito-idp')\n        \n        def lambda_handler(event, context):\n            print(\"Event received:\", json.dumps(event))\n        \n            if 'userName' not in event or event['userName'] is None:\n                raise ValueError('userName is required')\n        \n            if 'userPoolId' not in event or event['userPoolId'] is None:\n                raise ValueError('userPoolId is required')\n        \n            try:\n                client.admin_add_user_to_group(\n                    UserPoolId=event['userPoolId'],\n                    Username=event['userName'],\n                    GroupName='User'  # Changed from 'AcpUserGroup' to 'User'\n                )\n                print(f\"User {event['userName']} added to User group\")\n                return event\n            except Exception as e:\n                print(f\"Error adding user to group: {str(e)}\")\n                raise\n      Policies:\n        - AWSXrayWriteOnlyAccess\n        - Statement:\n            - Effect: Allow\n              Action:\n                - cognito-idp:AdminAddUserToGroup\n                - sqs:SendMessage\n              Resource: '*'\n    Type: AWS::Serverless::Function\n\n  PostUserConfirmationTriggerPermission:\n    Properties:\n      Action: lambda:InvokeFunction\n      FunctionName: !GetAtt PostUserConfirmationTrigger.Arn\n      Principal: cognito-idp.amazonaws.com\n      SourceArn: !GetAtt UserPool.Arn\n    Type: AWS::Lambda::Permission\n\n  UserPoolClient:\n    Properties:\n      ClientName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-user-pool-client\"\n      ExplicitAuthFlows:\n        - USER_PASSWORD_AUTH\n      GenerateSecret: false\n      PreventUserExistenceErrors: ENABLED\n      UserPoolId: !Ref UserPool\n    Type: AWS::Cognito::UserPoolClient\n\n  # IAM Roles\n  AuthorizedRole:\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Federated: \"cognito-identity.amazonaws.com\"\n            Action:\n              - sts:AssumeRoleWithWebIdentity\n            Condition:\n              StringEquals:\n                'cognito-identity.amazonaws.com:aud':\n                  Ref: IdentityPool\n              'ForAnyValue:StringLike':\n                'cognito-identity.amazonaws.com:amr': authenticated\n      Path: /\n      Policies:\n        - PolicyName: !Sub \"${CustomerId}-${ProjectId}-authorized-cognito-policy\"\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - mobileanalytics:PutEvents\n                  - cognito-sync:*\n                  - cognito-identity:*\n                Resource: '*'\n        - PolicyName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-authorized-bucket-policy\"\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Effect: Allow\n                Action:\n                  - s3:PutObject\n                Resource:\n                  - !Sub \"arn:aws:s3:::${CognitoLogsBucket}/*\"\n      RoleName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-authorized-role\"\n    Type: AWS::IAM::Role\n\n  CognitoSMSRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: cognito-idp.amazonaws.com\n            Action: sts:AssumeRole\n            Condition:\n              StringEquals:\n                'sts:ExternalId': !Sub \"${CustomerId}-${ProjectId}-${Environment}-cognito-sms\"\n      Policies:\n        - PolicyName: CognitoSMSPolicy\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - sns:publish\n                Resource: '*'\n  LambdaRole:\n    Properties:\n      AssumeRolePolicyDocument:\n        Statement:\n          - Action:\n              - sts:AssumeRole\n            Effect: Allow\n            Principal:\n              Service:\n                - lambda.amazonaws.com\n        Version: 2012-10-17\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n      Path: /\n      Policies:\n        - PolicyName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-cognito-lambda-policy\"\n          PolicyDocument:\n            Version: 2012-10-17\n            Statement:\n              - Action:\n                  - cloudfront:CreateInvalidation\n                  - codepipeline:PutJobSuccessResult\n                  - codepipeline:PutJobFailureResult\n                  - cloudformation:DescribeStacks\n                Effect: Allow\n                Resource: '*'\n      RoleName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-cognito-lambda-role\"\n    Type: AWS::IAM::Role\n\n  # Parameter Store\n  UserPoolIdParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-cognito-user-pool-id\"\n      Type: String\n      Value: !Ref UserPool\n      Description: UserPoolId\n      Tags:\n        Billable: true\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n    Type: AWS::SSM::Parameter\n\n  # S3\n  CognitoLogsBucket:\n    Properties:\n      BucketName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-cognito-logs\"\n      LifecycleConfiguration:\n        Rules:\n          - ExpirationInDays: !Ref ExpirationInDays\n            Id: !Sub \"${CustomerId}-${ProjectId}-${Environment}-lifecycle-rule\"\n            Status: Enabled\n      PublicAccessBlockConfiguration:\n        BlockPublicAcls: True\n        BlockPublicPolicy: True\n        IgnorePublicAcls: True\n        RestrictPublicBuckets: True\n      Tags:\n        - Key: Billable\n          Value: \"true\"\n        - Key: CustomerId\n          Value: !Ref CustomerId\n        - Key: Environment\n          Value: !Ref Environment\n        - Key: ProjectId\n          Value: !Ref ProjectId\n    Type: AWS::S3::Bucket"
    },
    {
      "source": "backend/infrastructure/cloudformation/appsync.yml",
      "document_content": "# --------------------------------------------------- #\nAWSTemplateFormatVersion: 2010-09-09\n\n# --------------------------------------------------- #\nTransform: AWS::Serverless-2016-10-31\n\n# --------------------------------------------------- #\nDescription: >\n Application Infrastructure - AppSync Stack\n\n# --------------------------------------------------- #\nParameters:\n  Environment:\n    Default: dev\n    Type: String\n  CustomerId:\n    Default: orb\n    Type: String\n  ProjectId:\n    Default: integration-hub\n    Type: String\n  TracingIs:\n    Default: Active\n    Type: String\n\n# --------------------------------------------------- #\nResources:\n  IntegrationHubApi:\n    Type: AWS::AppSync::GraphQLApi\n    Properties:\n      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-appsync'\n      AuthenticationType: AMAZON_COGNITO_USER_POOLS\n      UserPoolConfig:\n        UserPoolId: !Sub \"${CustomerId}-${ProjectId}-${Environment}-cognito-user-pool-id\"\n        AwsRegion: !Ref AWS::Region\n        DefaultAction: ALLOW\n      AdditionalAuthenticationProviders:\n        - AuthenticationType: API_KEY\n      LogConfig:\n        CloudWatchLogsRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn\n        FieldLogLevel: ALL\n        ExcludeVerboseContent: false\n  IntegrationHubApiKey:\n    Type: AWS::AppSync::ApiKey\n    Properties:\n      ApiId: !GetAtt IntegrationHubApi.ApiId\n      Description: \"API Key for unauthenticated access\"\n      Expires: 1735603200\n  ApiKeySecret:\n    Type: AWS::SecretsManager::Secret\n    Properties:\n      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-appsync-graphql-key'\n      Description: \"AppSync API Key for unauthenticated access\"\n      SecretString: !GetAtt IntegrationHubApiKey.ApiKey\n  IntegrationHubSchema:\n    Type: AWS::AppSync::GraphQLSchema\n    Properties:\n      ApiId: !GetAtt IntegrationHubApi.ApiId\n      Definition: |\n        type Payment @aws_api_key{\n          payment_id: ID!\n          customer_id: String!\n          amount: Float!\n          currency: String!\n          payment_method_id: String!\n          created_on: AWSDateTime!\n        }\n  \n        type StripePaymentResponse @aws_api_key{\n          status: String!\n          message: String\n        }\n  \n        input StripePaymentInput @aws_api_key{\n          payment_id: ID!\n          customer_id: String!\n          amount: Float!\n          currency: String!\n          payment_method_id: String!\n          created_on: AWSDateTime!\n        }\n  \n        type ContactMessageResponse @aws_api_key {\n          success: Boolean\n          message: String\n        }\n  \n        input ContactMessageInput @aws_api_key { \n          name_first: String!\n          name_last: String!\n          email: String!\n          subject: String!\n          message: String!\n        }\n\n        input RegistrationInput @aws_api_key {\n          registration_id: ID!\n          cognito_id: String!\n          name_first: String!\n          name_last: String!\n          email: String!\n          gender: String!\n          birthdate: AWSDate!\n          allergies: String!\n          dietary_restrictions: String!\n          home_church: String\n          photography_consent: String!\n          drug_policy_acknowledged: Boolean!\n          medication_policy_acknowledged: Boolean!\n          refund_policy_acknowledged: Boolean!\n          truthfulness_acknowledged: Boolean!\n          created_on: AWSDateTime!\n        }\n\n        type RegistrationResult @aws_api_key{\n          status: String!\n          registration_id: ID!\n        }\n  \n        type Mutation {\n          processStripePayment(input: StripePaymentInput!): StripePaymentResponse! @aws_api_key\n          sendContactMessage(input: ContactMessageInput!): ContactMessageResponse! @aws_api_key\n          processRegistration(input: RegistrationInput!): RegistrationResult! @aws_api_key\n        }\n  \n        type Query {\n          getPayment(payment_id: ID!, customer_id: String!): Payment @aws_cognito_user_pools @aws_api_key\n          getRegistrationByCognitoId(cognito_id: String!): RegistrationResult @aws_cognito_user_pools @aws_api_key\n          listPaymentsByCustomer(customer_id: String!, limit: Int, nextToken: String): PaymentConnection! @aws_api_key\n        }\n  \n        type PaymentConnection @aws_api_key{\n          items: [Payment!]!\n          nextToken: String\n        }\n  \n        schema {\n          query: Query\n          mutation: Mutation\n        }\n\n  # Data Sources\n  ContactFormDataSource:\n    Type: AWS::AppSync::DataSource\n    Properties:\n      ApiId: !GetAtt IntegrationHubApi.ApiId\n      Name: ContactFormDataSource\n      Type: AWS_LAMBDA\n      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn\n      LambdaConfig:\n        LambdaFunctionArn: !Sub '{{resolve:ssm:/${CustomerId}/${ProjectId}/${Environment}/contact-us/lambda/arn}}'\n  DynamoDBDataSource:\n    Type: AWS::AppSync::DataSource\n    Properties:\n      ApiId: !GetAtt IntegrationHubApi.ApiId\n      Name: DynamoDBDataSource\n      Type: AMAZON_DYNAMODB\n      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn\n      DynamoDBConfig:\n        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-payments-table-name}}'\n        AwsRegion: !Ref AWS::Region\n  PaymentProcessorDataSource:\n    Type: AWS::AppSync::DataSource\n    Properties:\n      ApiId: !GetAtt IntegrationHubApi.ApiId\n      Name: PaymentProcessorDataSource\n      Type: AWS_LAMBDA\n      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn\n      LambdaConfig:\n        LambdaFunctionArn: !Sub '{{resolve:ssm:/${CustomerId}/${ProjectId}/${Environment}/payment-processor/lambda/arn}}'\n  RegistrationsDataSource:\n    Type: AWS::AppSync::DataSource\n    Properties:\n      ApiId: !GetAtt IntegrationHubApi.ApiId\n      Name: RegistrationsDataSource\n      Type: AMAZON_DYNAMODB\n      ServiceRoleArn: !GetAtt AppSyncServiceRole.Arn\n      DynamoDBConfig:\n        TableName: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-registrations-table-name}}'\n        AwsRegion: !Ref AWS::Region\n\n  # Resolvers\n  ProcessStripePaymentResolver:\n    Type: AWS::AppSync::Resolver\n    DependsOn: IntegrationHubSchema\n    Properties:\n      ApiId: !GetAtt IntegrationHubApi.ApiId\n      TypeName: Mutation\n      FieldName: processStripePayment\n      DataSourceName: !GetAtt PaymentProcessorDataSource.Name\n      RequestMappingTemplate: |\n        {\n          \"version\": \"2018-05-29\",\n          \"operation\": \"Invoke\",\n          \"payload\": $util.toJson($context.arguments)\n        }\n      ResponseMappingTemplate: |\n        $util.toJson($context.result)\n\n  SendContactMessageResolver:\n    Type: AWS::AppSync::Resolver\n    DependsOn: IntegrationHubSchema\n    Properties:\n      ApiId: !GetAtt IntegrationHubApi.ApiId\n      TypeName: Mutation\n      FieldName: sendContactMessage\n      DataSourceName: !GetAtt ContactFormDataSource.Name\n      RequestMappingTemplate: |\n        {\n          \"version\": \"2018-05-29\",\n          \"operation\": \"Invoke\",\n          \"payload\": $util.toJson($context.arguments)\n        }\n      ResponseMappingTemplate: |\n        $util.toJson($context.result)\n\n  GetPaymentResolver:\n    Type: AWS::AppSync::Resolver\n    DependsOn: IntegrationHubSchema\n    Properties:\n      ApiId: !GetAtt IntegrationHubApi.ApiId\n      TypeName: Query\n      FieldName: getPayment\n      DataSourceName: !GetAtt DynamoDBDataSource.Name\n      RequestMappingTemplate: |\n        {\n          \"version\" : \"2017-02-28\",\n          \"operation\" : \"GetItem\",\n          \"key\" : {\n            \"payment_id\" : $util.dynamodb.toDynamoDBJson($ctx.args.payment_id),\n            \"customer_id\" : $util.dynamodb.toDynamoDBJson($ctx.args.customer_id)\n          }\n        }\n      ResponseMappingTemplate: |\n        $util.toJson($context.result)\n\n  getRegistrationByCognitoIdResolver:\n    Type: AWS::AppSync::Resolver\n    DependsOn: IntegrationHubSchema\n    Properties:\n      ApiId: !GetAtt IntegrationHubApi.ApiId\n      TypeName: Query\n      FieldName: getRegistrationByCognitoId\n      DataSourceName: !GetAtt RegistrationsDataSource.Name\n      RequestMappingTemplate: |\n        {\n          \"version\" : \"2017-02-28\",\n          \"operation\" : \"GetItem\",\n          \"key\" : {\n            \"cognito_id\" : $util.dynamodb.toDynamoDBJson($ctx.args.cognito_id)\n          }\n        }\n      ResponseMappingTemplate: |\n        $util.toJson($context.result)\n  ListPaymentsByCustomerResolver:\n    Type: AWS::AppSync::Resolver\n    DependsOn: IntegrationHubSchema\n    Properties:\n      ApiId: !GetAtt IntegrationHubApi.ApiId\n      TypeName: Query\n      FieldName: listPaymentsByCustomer\n      DataSourceName: !GetAtt DynamoDBDataSource.Name\n      RequestMappingTemplate: |\n        {\n          \"version\" : \"2017-02-28\",\n          \"operation\" : \"Query\",\n          \"query\" : {\n            \"expression\" : \"customer_id = :customerId\",\n            \"expressionValues\" : {\n              \":customerId\" : $util.dynamodb.toDynamoDBJson($ctx.args.customer_id)\n            }\n          },\n          \"index\" : \"customer_id-timestamp-index\",\n          \"scanIndexForward\" : false,\n          \"limit\": $util.defaultIfNull($ctx.args.limit, 20),\n          \"nextToken\": $util.toJson($util.defaultIfNull($ctx.args.nextToken, null))\n        }\n      ResponseMappingTemplate: |\n        {\n          \"items\": $util.toJson($context.result.items),\n          \"nextToken\": $util.toJson($context.result.nextToken)\n        }\n\n  ProcessRegistrationResolver:\n    Type: AWS::AppSync::Resolver\n    DependsOn: IntegrationHubSchema\n    Properties:\n      ApiId: !GetAtt IntegrationHubApi.ApiId\n      TypeName: Mutation\n      FieldName: processRegistration\n      DataSourceName: !GetAtt RegistrationsDataSource.Name\n      RequestMappingTemplate: |\n        {\n          \"version\": \"2018-05-29\",\n          \"operation\": \"PutItem\",\n          \"key\": {\n            \"cognito_id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.cognito_id),\n            \"registration_id\": $util.dynamodb.toDynamoDBJson($ctx.args.input.registration_id)\n          },\n          \"attributeValues\": {\n            \"name_first\": $util.dynamodb.toDynamoDBJson($ctx.args.input.name_first),\n            \"name_last\": $util.dynamodb.toDynamoDBJson($ctx.args.input.name_last),\n            \"email\": $util.dynamodb.toDynamoDBJson($ctx.args.input.email),\n            \"gender\": $util.dynamodb.toDynamoDBJson($ctx.args.input.gender),\n            \"created_on\": $util.dynamodb.toDynamoDBJson($ctx.args.input.created_on),\n          }\n        }\n      ResponseMappingTemplate: |\n        #if($context.error)\n          $util.error($context.error.message, $context.error.type)\n        #else\n          {\n            \"status\": \"succeeded\",\n            \"registration_id\": \"$registration_id\"\n          }\n        #end\n\n\n  # IAM\n  AppSyncServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: appsync.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: AppSyncServicePolicy\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - lambda:InvokeFunction\n                Resource:\n                  - !Sub '{{resolve:ssm:/${CustomerId}/${ProjectId}/${Environment}/payment-processor/lambda/arn}}'\n                  - !Sub '{{resolve:ssm:/${CustomerId}/${ProjectId}/${Environment}/contact-us/lambda/arn}}'\n              - Effect: Allow\n                Action:\n                  - dynamodb:GetItem\n                  - dynamodb:Query\n                Resource:\n                  - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-payments-table-arn}}'\n                  - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-payments-table-arn}}/index/*'\n              - Effect: Allow\n                Action:\n                  - dynamodb:PutItem\n                Resource:\n                  - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-registrations-table-arn}}'\n  AppSyncLoggingServiceRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: appsync.amazonaws.com\n            Action: sts:AssumeRole\n      Policies:\n        - PolicyName: AppSyncLoggingServicePolicy\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Resource:\n                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/*:*'\n\n# --------------------------------------------------- #\nOutputs:\n  GraphQLApiUrl:\n    Description: 'URL of the AppSync GraphQL API'\n    Value: !GetAtt IntegrationHubApi.GraphQLUrl\n  GraphQLApiKeySecretName:\n    Description: 'Name of the Secret containing the AppSync API Key'\n    Value: !Ref ApiKeySecret\n"
    },
    {
      "source": "backend/infrastructure/cloudformation/dynamodb.yml",
      "document_content": "# --------------------------------------------------- #\nAWSTemplateFormatVersion: 2010-09-09\n\n# --------------------------------------------------- #\nTransform: AWS::Serverless-2016-10-31\n\n# --------------------------------------------------- #\nDescription: Application Infrastructure\n\n# --------------------------------------------------- #\nParameters:\n  Environment:\n    Default: dev\n    Type: String\n  CustomerId:\n    Default: orb\n    Type: String\n  ProjectId:\n    Default: integration-hub\n    Type: String\n  TracingIs:\n    Default: Active\n    Type: String\n\n# --------------------------------------------------- #\nResources:\n\n  # Customers Table\n  CustomersTable:\n    Properties:\n      AttributeDefinitions:\n        -\n          AttributeName: customer_id\n          AttributeType: S\n      BillingMode: PAY_PER_REQUEST\n      KeySchema:\n        -\n          AttributeName: customer_id\n          KeyType: HASH\n      TableName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-customers\"\n      Tags:\n        - Key: Billable\n          Value: \"true\"\n        - Key: CustomerId\n          Value: !Ref CustomerId\n        - Key: Environment\n          Value: !Ref Environment\n        - Key: ProjectId\n          Value: !Ref ProjectId\n    Type: AWS::DynamoDB::Table\n\n  # Payment Gateway Table\n  PaymentGatewayTable:\n    Properties:\n      AttributeDefinitions:\n        -\n          AttributeName: customer_id\n          AttributeType: S\n        -\n          AttributeName: payment_type_id\n          AttributeType: S\n      BillingMode: PAY_PER_REQUEST\n      KeySchema:\n        -\n          AttributeName: customer_id\n          KeyType: HASH\n        -\n          AttributeName: payment_type_id\n          KeyType: RANGE\n      TableName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-integration-hub\"\n      Tags:\n        - Key: Billable\n          Value: \"true\"\n        - Key: CustomerId\n          Value: !Ref CustomerId\n        - Key: Environment\n          Value: !Ref Environment\n        - Key: ProjectId\n          Value: !Ref ProjectId\n    Type: AWS::DynamoDB::Table\n\n  # Payments Table\n  PaymentsTable:\n    Properties:\n      AttributeDefinitions:\n        -\n          AttributeName: customer_id\n          AttributeType: S\n        -\n          AttributeName: payment_id\n          AttributeType: S\n        -\n          AttributeName: created_on\n          AttributeType: S\n      BillingMode: PAY_PER_REQUEST\n      KeySchema:\n        -\n          AttributeName: customer_id\n          KeyType: HASH\n        -\n          AttributeName: payment_id\n          KeyType: RANGE\n\n      GlobalSecondaryIndexes:\n        -\n          IndexName: customer_id-timestamp-index\n          KeySchema:\n            -\n              AttributeName: customer_id\n              KeyType: HASH\n            -\n              AttributeName: created_on\n              KeyType: RANGE\n          Projection:\n            ProjectionType: ALL\n      TableName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-payments\"\n      Tags:\n        - Key: Billable\n          Value: \"true\"\n        - Key: CustomerId\n          Value: !Ref CustomerId\n        - Key: Environment\n          Value: !Ref Environment\n        - Key: ProjectId\n          Value: !Ref ProjectId\n    Type: AWS::DynamoDB::Table\n\n  # Registrations Table\n  RegistrationsTable:\n    Properties:\n      AttributeDefinitions:\n        -\n          AttributeName: cognito_id\n          AttributeType: S\n      BillingMode: PAY_PER_REQUEST\n      KeySchema:\n        -\n          AttributeName: cognito_id\n          KeyType: HASH\n      TableName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-registrations\"\n      Tags:\n        - Key: Billable\n          Value: \"true\"\n        - Key: CustomerId\n          Value: !Ref CustomerId\n        - Key: Environment\n          Value: !Ref Environment\n        - Key: ProjectId\n          Value: !Ref ProjectId\n    Type: AWS::DynamoDB::Table\n\n  # Customers Parameter Store\n  CustomersTableNameParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-customers-table-name\"\n      Type: String\n      Value: !Ref CustomersTable\n      Description: DynamoDB Customers Table Name\n      Tags:\n        Billable: true\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n    Type: AWS::SSM::Parameter\n  CustomersTableArnParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-customers-table-arn\"\n      Type: String\n      Value: !GetAtt CustomersTable.Arn\n      Description: DynamoDB Customers Table Arn\n      Tags:\n        Billable: true\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n    Type: AWS::SSM::Parameter\n\n  # Payment Gateway Parameter Store\n  PaymentGatewayTableNameParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-integration-hub-table-name\"\n      Type: String\n      Value: !Ref PaymentGatewayTable\n      Description: DynamoDB Payment Gateway Table Name\n      Tags:\n        Billable: true\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n    Type: AWS::SSM::Parameter\n  PaymentGatewayTableArnParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-integration-hub-table-arn\"\n      Type: String\n      Value: !GetAtt PaymentGatewayTable.Arn\n      Description: DynamoDB Payment Gateway Table Arn\n      Tags:\n        Billable: true\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n    Type: AWS::SSM::Parameter\n\n  # Payments Parameter Store\n  PaymentsTableNameParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-payments-table-name\"\n      Type: String\n      Value: !Ref PaymentsTable\n      Description: DynamoDB Payments Table Name\n      Tags:\n        Billable: true\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n    Type: AWS::SSM::Parameter\n  PaymentTableArnParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-payments-table-arn\"\n      Type: String\n      Value: !GetAtt PaymentsTable.Arn\n      Description: DynamoDB Payments Table Arn\n      Tags:\n        Billable: true\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n    Type: AWS::SSM::Parameter\n\n  # Registrations Parameter Store\n  RegistrationsTableNameParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-registrations-table-name\"\n      Type: String\n      Value: !Ref RegistrationsTable\n      Description: DynamoDB Registrations Table Name\n      Tags:\n        Billable: true\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n    Type: AWS::SSM::Parameter\n  RegistrationsTableArnParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-registrations-table-arn\"\n      Type: String\n      Value: !GetAtt RegistrationsTable.Arn\n      Description: DynamoDB Registrations Table Arn\n      Tags:\n        Billable: true\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n    Type: AWS::SSM::Parameter"
    },
    {
      "source": "backend/infrastructure/cloudformation/frontend-resources.yml",
      "document_content": "AWSTemplateFormatVersion: '2010-09-09'\nDescription: 'CloudFormation template for within-the-veil.ca React website'\n\nParameters:\n  CloudFrontDistributionHostedZoneId:\n    Type: String\n    Default: Z2FDTNDATAQYW2\n    Description: The CloudFront distribution hosted zone ID\n  DomainName:\n    Type: String\n    Default: within-the-veil.ca\n    Description: The domain name for the website\n  Environment:\n    Type: String\n    Default: dev\n    Description: The environment for the website\n  Organization:\n    Type: String\n    Default: orb\n    Description: The organization for the website\n  ProjectId:\n    Type: String\n    Default: wtv\n    Description: The project ID for the website\n\nResources:\n  S3Bucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: !Sub '${Organization}-${ProjectId}-${Environment}-website'\n      AccessControl: Private\n      WebsiteConfiguration:\n        IndexDocument: index.html\n        ErrorDocument: index.html\n\n  S3BucketPolicy:\n    Type: AWS::S3::BucketPolicy\n    Properties:\n      Bucket: !Ref S3Bucket\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOAI}'\n            Action: 's3:GetObject'\n            Resource: !Sub '${S3Bucket.Arn}/*'\n\n  CloudFrontOAI:\n    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity\n    Properties:\n      CloudFrontOriginAccessIdentityConfig:\n        Comment: OAI for within-the-veil.ca\n\n  CloudFrontDistribution:\n    Type: AWS::CloudFront::Distribution\n    Properties:\n      DistributionConfig:\n        Enabled: true\n        DefaultRootObject: index.html\n        Aliases:\n          - !Ref DomainName\n        ViewerCertificate:\n          AcmCertificateArn: !Ref Certificate\n          SslSupportMethod: sni-only\n        Origins:\n          - Id: S3Origin\n            DomainName: !GetAtt S3Bucket.RegionalDomainName\n            S3OriginConfig:\n              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'\n        DefaultCacheBehavior:\n          TargetOriginId: S3Origin\n          ViewerProtocolPolicy: redirect-to-https\n          AllowedMethods:\n            - GET\n            - HEAD\n          Compress: true\n          ForwardedValues:\n            QueryString: false\n        CustomErrorResponses:\n          - ErrorCode: 404\n            ResponseCode: 200\n            ResponsePagePath: /index.html\n\n  Certificate:\n    Type: AWS::CertificateManager::Certificate\n    Properties:\n      DomainName: !Ref DomainName\n      ValidationMethod: DNS\n\n  Route53RecordSet:\n    Type: AWS::Route53::RecordSet\n    Properties:\n      HostedZoneName: !Sub '${DomainName}.'\n      Name: !Ref DomainName\n      Type: A\n      AliasTarget:\n        DNSName: !GetAtt CloudFrontDistribution.DomainName\n        HostedZoneId: !Ref CloudFrontDistributionHostedZoneId\n\nOutputs:\n  WebsiteURL:\n    Value: !Sub 'https://${DomainName}'\n    Description: URL of the website\n  S3BucketName:\n    Value: !Ref S3Bucket\n    Description: Name of the S3 bucket\n  CloudFrontDistributionId:\n    Value: !Ref CloudFrontDistribution\n    Description: ID of the CloudFront distribution"
    },
    {
      "source": "backend/infrastructure/cloudformation/lambdas.yml",
      "document_content": "# --------------------------------------------------- #\nAWSTemplateFormatVersion: 2010-09-09\n\n# --------------------------------------------------- #\nTransform: AWS::Serverless-2016-10-31\n\n# --------------------------------------------------- #\nDescription: >\n  Application Infrastructure - Lambda Stack\n\n# --------------------------------------------------- #\nParameters:\n  ApplicationLoggingLevel:\n    Default: DEBUG\n    Type: String\n  Environment:\n    Default: dev\n    Type: String\n  LogFormat:\n    Default: JSON\n    Type: String\n  NotificationEmail:\n    Default: models@oneredboot.com\n    Description: The email address for notifications\n    Type: String\n  CustomerId:\n    Default: orb\n    Type: String\n  ProjectId:\n    Default: integration-hub\n    Type: String\n  Runtime:\n    Default: python3.12\n    Type: String\n  SystemLoggingLevel:\n    Default: WARN\n    Type: String\n  ToEmail:\n    Default: corey@shabot.ca\n    Description: The email address to send contact form submissions to\n    Type: String\n\n# --------------------------------------------------- #\nGlobals:\n  Function:\n    DeadLetterQueue:\n      TargetArn: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue-arn}}'\n      Type: SNS\n    Environment:\n      Variables:\n        ALERTS_QUEUE: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-alerts-queue-arn}}'\n        LOGGING_LEVEL: INFO\n        VERSION: 1\n    Handler: index.lambda_handler\n    MemorySize: 256\n    Runtime: !Ref Runtime\n    Tags:\n      Billable: true\n      CustomerId: !Ref CustomerId\n      Environment: !Ref Environment\n      ProjectId: !Ref ProjectId\n    Timeout: 30\n\n# --------------------------------------------------- #\nResources:\n\n  # Lambda Function for Payment Processing\n  PaymentProcessorFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: !Sub '${CustomerId}-${ProjectId}-${Environment}-payment-processor'\n      Role: !GetAtt LambdaExecutionRole.Arn\n      CodeUri: ../../src/lambdas/stripe\n      Environment:\n        Variables:\n          ENVIRONMENT: !Ref Environment\n          LOG_LEVEL: !Ref ApplicationLoggingLevel\n          PAYMENTS_TABLE_NAME: !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-payments-table-name}}'\n          STRIPE_SECRET_KEY_PATH: !Sub '/${CustomerId}/${ProjectId}/${Environment}/stripe/publishable/key'\n      Layers:\n        - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-stripe-layer-arn}}'\n  StripePublishableKeyFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: !Sub '${CustomerId}-${ProjectId}-${Environment}-stripe-publishable-key'\n      Role: !GetAtt LambdaExecutionRole.Arn\n      CodeUri: ../../src/lambdas/stripe_publishable_key\n      Environment:\n        Variables:\n          ENVIRONMENT: !Ref Environment\n          LOG_LEVEL: !Ref ApplicationLoggingLevel\n          STRIPE_PUBLISHABLE_KEY_SECRET: !Ref StripePublishableKeySecret\n\n  # Lambda Function for Contact Us Form\n  ContactFormFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: !Sub '${CustomerId}-${ProjectId}-${Environment}-contact-us'\n      CodeUri: ../../src/lambdas/contact_us\n      Role: !GetAtt LambdaExecutionRole.Arn\n      Environment:\n        Variables:\n          TO_EMAIL: !Ref ToEmail\n\n  # IAM Roles\n  LambdaExecutionRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: lambda.amazonaws.com\n            Action: sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\n        - !Ref CloudWatchLoggingPolicy\n        - !Ref ParameterStorePolicy\n        - !Ref QueueStorePolicy\n        - !Ref SecretsManagerPolicy\n      Policies:\n        - PolicyName: DynamoDBAccess\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - dynamodb:PutItem\n                  - dynamodb:GetItem\n                Resource:\n                  - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-payments-table-arn}}'\n        - PolicyName: SecretsManagerAccess\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - secretsmanager:GetSecretValue\n                Resource:\n                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${CustomerId}-${ProjectId}-${Environment}-*'\n\n        - PolicyName: SSMParameterAccess\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - ssm:GetParameter\n                Resource:\n                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${CustomerId}-${ProjectId}-${Environment}-*'\n        - PolicyName: CloudWatchLogging\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - logs:CreateLogGroup\n                  - logs:CreateLogStream\n                  - logs:PutLogEvents\n                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${CustomerId}-${ProjectId}-${Environment}-*'\n        - PolicyName: SQSAccess\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - sqs:SendMessage\n                Resource:\n                  - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-alerts-queue-arn}}'\n                  - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue-arn}}'\n        - PolicyName: SNSAccess\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - sns:Publish\n                Resource:\n                  - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-alerts-queue-arn}}'\n                  - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue-arn}}'\n        - PolicyName: SESAccess\n          PolicyDocument:\n            Version: '2012-10-17'\n            Statement:\n              - Effect: Allow\n                Action:\n                  - ses:SendEmail\n                Resource: '*'\n\n  # IAM Policies\n  CloudWatchLoggingPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      ManagedPolicyName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-cloudwatch-access-policy\"\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Action:\n              - \"logs:CreateLogGroup\"\n              - \"logs:CreateLogStream\"\n              - \"logs:PutLogEvents\"\n            Resource:\n              - \"arn:aws:logs:*:*:*\"\n  ParameterStorePolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      ManagedPolicyName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-parameter-store-policy\"\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Action:\n              - \"ssm:GetParameter\"\n            Resource:\n              - !Sub \"arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter//${CustomerId}/${ProjectId}/${Environment}/*\"\n  QueueStorePolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      ManagedPolicyName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-queue-store-policy\"\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Action:\n              - \"sqs:*\"\n              - \"sns:*\"\n            Resource:\n              - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue-arn}}'\n              - !Sub '{{resolve:ssm:${CustomerId}-${ProjectId}-${Environment}-alerts-queue-arn}}'\n  SecretsManagerPolicy:\n    Type: AWS::IAM::ManagedPolicy\n    Properties:\n      ManagedPolicyName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-secrets-manager-policy\"\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Action:\n              - \"secretsmanager:GetSecretValue\"\n            Resource:\n              - !Sub \"arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${CustomerId}/${ProjectId}/${Environment}/*\"\n\n  # SSM Parameters\n  ContactUsLambdaArnParameter:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Name: !Sub \"/${CustomerId}/${ProjectId}/${Environment}/contact-us/lambda/arn\"\n      Type: String\n      Value: !GetAtt ContactFormFunction.Arn\n      Description: ARN of the Contact Us Lambda function\n      Tags:\n        Billable: true\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n  PaymentProcessorLambdaArnParameter:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Name: !Sub \"/${CustomerId}/${ProjectId}/${Environment}/payment-processor/lambda/arn\"\n      Type: String\n      Value: !GetAtt PaymentProcessorFunction.Arn\n      Description: ARN of the Payment Processor Lambda function\n      Tags:\n        Billable: true\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n  StripePublishableKeySecret:\n    Type: AWS::SecretsManager::Secret\n    Properties:\n      Name: !Sub '/${CustomerId}/${ProjectId}/${Environment}/stripe/publishable/key'\n      Description: \"AppSync API Key for unauthenticated access\"\n      SecretString: \"change-me\"\n\n# --------------------------------------------------- #\nOutputs:\n  PaymentProcessorFunctionArn:\n    Description: ARN of the Payment Processor Lambda function\n    Value: !GetAtt PaymentProcessorFunction.Arn\n  ContactFormFunctionArn:\n    Description: ARN of the Contact Us Lambda function\n    Value: !GetAtt ContactFormFunction.Arn"
    },
    {
      "source": "backend/infrastructure/cloudformation/bootstrap.yml",
      "document_content": "# --------------------------------------------------- #\nAWSTemplateFormatVersion: 2010-09-09\n\n# --------------------------------------------------- #\nTransform: AWS::Serverless-2016-10-31\n\n# --------------------------------------------------- #\nDescription: >\n Application Infrastructure - Bootstrap Stack\n\n# --------------------------------------------------- #\nParameters:\n  Environment:\n    Default: dev\n    Type: String\n  CustomerId:\n    Default: orb\n    Type: String\n  ProjectId:\n    Default: integration-hub\n    Type: String\n  TracingIs:\n    Default: Active\n    Type: String\n\n# --------------------------------------------------- #\nResources:\n  # S3 Buckets\n  BuildArtifactBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Retain\n    Properties:\n      BucketName: !Sub '${CustomerId}-${ProjectId}-build-artifacts'\n      Tags:\n        - Key: Billable\n          Value: \"true\"\n        - Key: CustomerId\n          Value: !Ref CustomerId\n        - Key: Environment\n          Value: !Ref Environment\n        - Key: ProjectId\n          Value: !Ref ProjectId\n  BuildTemplatesBucket:\n    Type: AWS::S3::Bucket\n    DeletionPolicy: Retain\n    Properties:\n      BucketName: !Sub '${CustomerId}-${ProjectId}-build-templates'\n      VersioningConfiguration:\n        Status: Enabled\n      Tags:\n        - Key: Billable\n          Value: \"true\"\n        - Key: CustomerId\n          Value: !Ref CustomerId\n        - Key: Environment\n          Value: !Ref Environment\n        - Key: ProjectId\n          Value: !Ref ProjectId\n\n  # IAM User for GitHub Actions\n  GitHubActionsUser:\n    Properties:\n      UserName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-github-actions\"\n      Tags:\n        - Key: Billable\n          Value: \"true\"\n        - Key: CustomerId\n          Value: !Ref CustomerId\n        - Key: Environment\n          Value: !Ref Environment\n        - Key: ProjectId\n          Value: !Ref ProjectId\n    Type: AWS::IAM::User\n\n  # IAM Policy for GitHub Actions User\n  GitHubActionsUserPolicy:\n    Properties:\n      PolicyName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-github-actions-user\"\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: Allow\n            Action:\n              - sts:GetCallerIdentity\n            Resource: '*'\n      Users:\n        - !Ref GitHubActionsUser\n    Type: AWS::IAM::Policy\n\n  # Access Keys for GitHub Actions User\n  GitHubActionsAccessKey:\n    Properties:\n      UserName: !Ref GitHubActionsUser\n    Type: AWS::IAM::AccessKey\n  GitHubActionsSecretAccessKeyParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-github-actions-secret-access-key\"\n      Type: String\n      Value: !GetAtt GitHubActionsAccessKey.SecretAccessKey\n    Type: AWS::SSM::Parameter\n  GitHubActionsAccessKeyIdParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-github-actions-access-key-id\"\n      Type: String\n      Value: !Ref GitHubActionsAccessKey\n    Type: AWS::SSM::Parameter\n\n  # IAM Group for GitHub Actions Deployment\n  GitHubActionsDeploymentGroup:\n    Type: AWS::IAM::Group\n    Properties:\n      GroupName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-github-actions-deployment\"\n      ManagedPolicyArns:\n        - !Ref CloudWatchLoggingPolicy\n        - !Ref CloudWatchDashboardPolicy\n        - !Ref DeployPolicy\n  DeployPolicy:\n    Properties:\n      ManagedPolicyName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-deploy\"\n      PolicyDocument:\n        Version: '2012-10-17'\n        Statement:\n          - Effect: \"Allow\"\n            Action:\n              - iam:*\n            Resource: \"*\"\n          - Effect: Allow\n            Action:\n              - cloudformation:GetTemplateSummary\n              - cloudformation:CreateStack\n              - cloudformation:DescribeStacks\n              - cloudformation:DeleteStack\n              - cloudformation:UpdateStack\n              - cloudformation:CreateChangeSet\n              - cloudformation:DeleteChangeSet\n              - cloudformation:DescribeChangeSet\n              - cloudformation:ExecuteChangeSet\n              - cloudformation:UpdateChangeSet\n              - cloudformation:SetStackPolicy\n              - cloudformation:DescribeStackEvents\n              - cloudwatch:DeleteAlarms\n              - cloudwatch:DescribeAlarms\n              - cloudwatch:PutMetricAlarm\n              - cloudwatch:UpdateAlarms\n            Resource: \"*\"\n          - Effect: Allow\n            Action:\n              - lambda:AddLayerVersionPermission\n              - lambda:DeleteLayerVersion\n              - lambda:GetLayerVersion\n              - lambda:GetLayerVersionPolicy\n              - lambda:ListLayerVersions\n              - lambda:ListLayers\n              - lambda:PublishLayerVersion\n              - lambda:RemoveLayerVersionPermission\n            Resource:\n              - !Sub \"arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:${CustomerId}-${ProjectId}-*\"\n          - Effect: Allow\n            Action:\n              - lambda:CreateEventSourceMapping\n              - lambda:TagResource\n              - lambda:UntagResource\n            Resource: \"*\"\n          - Effect: Allow\n            Action:\n              - appsync:*\n              - events:PutRule\n              - events:DescribeRule\n              - events:DeleteRule\n              - events:UpdateRule\n              - events:PutTargets\n              - events:RemoveTargets\n              - events:UpdateTargets\n              - s3:*\n              - secretsmanager:CreateSecret\n              - secretsmanager:GetRandomPassword\n              - secretsmanager:GetSecretValue\n              - secretsmanager:DeleteSecret\n              - secretsmanager:TagResource\n              - states:*\n              - cloudfront:*\n              - route53:*\n              - ssm:*\n            Resource: \"*\"\n          - Effect: Allow\n            Action:\n              - cognito-identity:CreateIdentityPool\n              - cognito-identity:DeleteIdentityPool\n              - cognito-identity:UpdateIdentityPool\n              - cognito-identity:SetIdentityPoolRoles\n              - cognito-idp:AddCustomAttributes\n              - cognito-idp:GetGroup\n              - cognito-idp:CreateGroup\n              - cognito-idp:DeleteGroup\n              - cognito-idp:CreateUserPool\n              - cognito-idp:AdminCreateUser\n              - cognito-idp:AdminDeleteUser\n              - cognito-idp:AdminDeleteUserAttributes\n              - cognito-idp:AdminAddUserToGroup\n              - cognito-idp:AdminGetUser\n              - cognito-idp:AdminRemoveUserFromGroup\n              - cognito-idp:AdminUpdateUserAttributes\n              - cognito-idp:UpdateGroup\n              - cognito-idp:CreateUserPoolClient\n              - cognito-idp:UpdateUserPoolClient\n              - cognito-idp:DeleteUserPool\n              - cognito-idp:DeleteUserPoolClient\n              - cognito-idp:DescribeUserPool\n              - cognito-idp:UpdateUserPool\n              - cognito-idp:ListTagsForResource\n              - cognito-idp:SetUserPoo\n              - cognito-idp:SetUserPoolMfaConfig\n            Resource:\n              - !Sub \"arn:aws:cognito-identity:${AWS::Region}:${AWS::AccountId}:identitypool/*\"\n              - !Sub \"arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*\"\n          - Effect: Allow\n            Action:\n              - dynamodb:ListTables\n              - dynamodb:CreateTable\n              - dynamodb:DeleteTable\n              - dynamodb:DescribeTable\n              - dynamodb:UpdateTable\n              - dynamodb:UpdateTimeToLive\n              - dynamodb:DescribeTimeToLive\n              - dynamodb:ListTagsOfResource\n              - dynamodb:TagResource\n              - dynamodb:UntagResource\n            Resource: !Sub \"arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${CustomerId}-${ProjectId}-*\"\n          - Effect: Allow\n            Action:\n              - ecr:*\n            Resource: !Sub \"arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${CustomerId}-${ProjectId}-*\"\n          - Effect: Allow\n            Action:\n              - lambda:AddPermission\n              - lambda:CreateAlias\n              - lambda:CreateFunction\n              - lambda:CreateEventSourceMapping\n              - lambda:DeleteAlias\n              - lambda:DeleteEventSourceMapping\n              - lambda:DescribeEventSourceMapping\n              - lambda:DeleteFunction\n              - lambda:GetAlias\n              - lambda:GetEventSourceMapping\n              - lambda:GetFunction\n              - lambda:GetFunctionConfiguration\n              - lambda:GetLayerVersion\n              - lambda:InvokeFunction\n              - lambda:ListVersionsByFunction\n              - lambda:ListTags\n              - lambda:TagResource\n              - lambda:UntagResource\n              - lambda:PublishVersion\n              - lambda:RemovePermission\n              - lambda:UpdateAlias\n              - lambda:UpdateFunction\n              - lambda:UpdateFunctionCode\n              - lambda:UpdateFunctionConfiguration\n              - lambda:PublishLayerVersion\n              - logs:*\n            Resource: !Sub \"arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${CustomerId}-${ProjectId}-*\"\n          - Effect: Allow\n            Action:\n              - sns:*\n              - sqs:*\n            Resource:\n              - !Sub \"arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${CustomerId}-${ProjectId}-*\"\n              - !Sub \"arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${CustomerId}-${ProjectId}-*\"\n    Type: AWS::IAM::ManagedPolicy\n\n  # IAM User to Group Addition\n  GitHubActionsUserToGitHubActionsDeploymentGroupAddition:\n    Type: AWS::IAM::UserToGroupAddition\n    Properties:\n      GroupName: !Ref GitHubActionsDeploymentGroup\n      Users:\n        - !Ref GitHubActionsUser\n\n  # Alert Queues\n  AlertsQueue:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-alerts-queue\"\n      Tags:\n        - Key: Billable\n          Value: \"true\"\n        - Key: CustomerId\n          Value: !Ref CustomerId\n        - Key: environment\n          Value: !Ref Environment\n        - Key: ProjectId\n          Value: !Ref ProjectId\n  AlertsQueueArnParameter:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-alerts-queue-arn\"\n      Tags:\n        Billable: \"true\"\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n      Type: String\n      Value: !GetAtt AlertsQueue.Arn\n\n  DeadLetterQueue:\n    Type: AWS::SQS::Queue\n    Properties:\n      QueueName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue\"\n      Tags:\n        - Key: Billable\n          Value: \"true\"\n        - Key: CustomerId\n          Value: !Ref CustomerId\n        - Key: Environment\n          Value: !Ref Environment\n        - Key: ProjectId\n          Value: !Ref ProjectId\n  DeadLetterQueueArnParameter:\n    Type: AWS::SSM::Parameter\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue-arn\"\n      Tags:\n        Billable: \"true\"\n        CustomerId: !Ref CustomerId\n        Environment: !Ref Environment\n        ProjectId: !Ref ProjectId\n      Type: String\n      Value: !GetAtt DeadLetterQueue.Arn\n\n  #\n  # Policies\n  #\n\n  # Cloud Watch\n  CloudWatchLoggingPolicy:\n    Properties:\n      ManagedPolicyName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-cloudwatch-logging\"\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Action:\n              - \"logs:CreateLogGroup\"\n              - \"logs:CreateLogStream\"\n              - \"logs:PutLogEvents\"\n            Resource:\n              - !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CustomerId}-${ProjectId}-${Environment}-*\"\n              - !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CustomerId}-${ProjectId}-${Environment}-*:log-stream:*\"\n              - !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CustomerId}-${ProjectId}-*-${Environment}-*\"\n              - !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${CustomerId}-${ProjectId}-*-${Environment}-*:log-stream:*\"\n              - !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/${CustomerId}-${ProjectId}-${Environment}-*\"\n              - !Sub \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/appsync/apis/${CustomerId}-${ProjectId}-${Environment}-*:log-stream:*\"\n    Type: AWS::IAM::ManagedPolicy\n  CloudWatchLoggingPolicyArnParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-cloudwatch-logging-policy-arn\"\n      Type: String\n      Value: !Ref CloudWatchLoggingPolicy\n    Type: AWS::SSM::Parameter\n\n  # Cloud Watch Dashboard\n  CloudWatchDashboardPolicy:\n    Properties:\n      ManagedPolicyName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-cloudwatch-dashboard\"\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Action:\n              - \"cloudwatch:PutDashboard\"\n              - \"cloudwatch:DeleteDashboards\"\n            Resource:\n              - !Sub \"arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:dashboard:${CustomerId}-${ProjectId}-${Environment}-*\"\n              - !Sub \"arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:dashboard:${CustomerId}-${ProjectId}-*-${Environment}-*\"\n    Type: AWS::IAM::ManagedPolicy\n  CloudWatchDashboardPolicyArnParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-cloudwatch-dashboard-policy-arn\"\n      Type: String\n      Value: !Ref CloudWatchDashboardPolicy\n    Type: AWS::SSM::Parameter\n\n  #Alerts Queue Policy\n  AlertsQueuePolicy:\n    Properties:\n      ManagedPolicyName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-alerts-queue-policy\"\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Action:\n              - \"sqs:SendMessage\"\n              - \"sqs:ReceiveMessage\"\n              - \"sqs:DeleteMessage\"\n              - \"sqs:GetQueueAttributes\"\n              - \"sqs:ChangeMessageVisibility\"\n            Resource: !Sub \"arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${CustomerId}-${ProjectId}-${Environment}-alerts-queue\"\n    Type: AWS::IAM::ManagedPolicy\n  AlertsQueuePolicyArnParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-alerts-queue-policy-arn\"\n      Type: String\n      Value: !Ref AlertsQueuePolicy\n    Type: AWS::SSM::Parameter\n\n  # Dead Letter Queue Policy\n  DeadLetterQueuePolicy:\n    Properties:\n      ManagedPolicyName: !Sub \"${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue\"\n      PolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: \"Allow\"\n            Action:\n              - \"sqs:SendMessage\"\n              - \"sqs:ReceiveMessage\"\n              - \"sqs:DeleteMessage\"\n              - \"sqs:GetQueueAttributes\"\n              - \"sqs:ChangeMessageVisibility\"\n            Resource: !Sub \"arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue\"\n    Type: AWS::IAM::ManagedPolicy\n  DeadLetterQueuePolicyArnParameter:\n    Properties:\n      Name: !Sub \"${CustomerId}-${ProjectId}-${Environment}-dead-letter-queue-policy-arn\"\n      Type: String\n      Value: !Ref DeadLetterQueuePolicy\n    Type: AWS::SSM::Parameter\n"
    },
    {
      "source": "backend/src/lambdas/paypal/index.py",
      "document_content": "# file: backend/src/lambdas/paypal/index.py\n# author: Corey Dale Peters\n# created: 2024-05-23\n# description: This is the lambda function that will process a payment using PayPal API.\n\n# 3rd Party Imports\nimport boto3\nimport json\nimport logging\nimport requests\nimport os\nfrom botocore.exceptions import ClientError\n\n# clients\nparameter_store_client = boto3.client('ssm')\n\n# environment variables\nENV_LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')\nENV_REGION = os.getenv('AWS_REGION', 'us-east-1')\n\n# Parameter Store Values\nAPPLICATION_PARAMETERS = parameter_store_client.get_parameters_by_path(Path='orb/integration-hub/paypal')\nPAYPAL_API_URL = APPLICATION_PARAMETERS.get('PAYPAL_API_URL','https://api.sandbox.paypal.com/v1/payments/payment')\n\n# Setting up logging\nlogger = logging.getLogger()\n# get level from environment variable\nlogger.setLevel(ENV_LOG_LEVEL)\n\n\n# DynamoDB table model\n\ndef process_paypal_payment(paypal_account, amount):\n    logger.debug(\"Processing payment with PayPal.\")\n    try:\n        # Dummy PayPal API URL for demonstration\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {paypal_account}\"  # Assuming this is an access token\n        }\n        payload = {\n            \"intent\": \"sale\",\n            \"payer\": {\n                \"payment_method\": \"paypal\"\n            },\n            \"transactions\": [{\n                \"amount\": {\n                    \"total\": str(amount),\n                    \"currency\": \"USD\"\n                },\n                \"description\": \"Payment description\"\n            }],\n            \"redirect_urls\": {\n                \"return_url\": \"https://example.com/return\",\n                \"cancel_url\": \"https://example.com/cancel\"\n            }\n        }\n\n        response = requests.post(PAYPAL_API_URL, headers=headers, json=payload)\n        response.raise_for_status()\n\n        return response.json()\n\n    except requests.exceptions.RequestException as e:\n        logger.error(f\"PayPal API request failed: {e}\")\n        return None\n\n\ndef lambda_handler(event, context):\n\n    logger.debug(f\"Received event: {event}\")\n    logger.debug(f\"Received context: {context}\")\n\n    try:\n        body = json.loads(event.get('body'))\n        amount = body.ge('amount')\n        paypal_account = body.get('paypal_account')\n\n        # Validate input data\n        if not paypal_account or not amount:\n            message = \"Missing required payment_id or amount\"\n            logger.error(message)\n            raise ValueError(message)\n\n        logger.info(f\"Received payment request for ID {paypal_account} with amount {amount}.\")\n\n        if not paypal_account:\n            return {\n                \"statusCode\": 400,\n                \"body\": json.dumps({\"message\": \"Invalid payment account\"})\n            }\n\n        # Process payment with PayPal\n        paypal_response = process_paypal_payment(paypal_account, amount)\n        if not paypal_response:\n            return {\n                \"statusCode\": 500,\n                \"body\": json.dumps({\"message\": \"Payment processing failed\"})\n            }\n\n        return {\n            \"statusCode\": 200,\n            \"body\": json.dumps({\"message\": \"Payment processed successfully\", \"paypal_response\": paypal_response})\n        }\n\n    except ValueError as ve:\n        logger.error(f\"Validation error: {ve}\")\n        return {\n            \"statusCode\": 400,\n            \"body\": json.dumps({\"message\": str(ve)})\n        }\n    except ClientError as e:\n        logger.error(f\"DynamoDB error: {e}\")\n        return {\n            \"statusCode\": 500,\n            \"body\": json.dumps({\"message\": \"Internal server error\"})\n        }\n    except Exception as e:\n        logger.error(f\"Unexpected error: {e}\")\n        return {\n            \"statusCode\": 500,\n            \"body\": json.dumps({\"message\": \"Internal server error\"})\n        }\n"
    },
    {
      "source": "backend/src/lambdas/contact_us/index.py",
      "document_content": "import json\nimport boto3\nimport os\nfrom botocore.exceptions import ClientError\nimport logging\n\n# Set up logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\ndef send_email(ses_client, to_email, subject, message):\n    \"\"\"\n    Helper function to send an email using Amazon SES.\n\n    :param ses_client: The boto3 SES client\n    :param to_email: The recipient's email address\n    :param subject: The email subject\n    :param message: The email body\n    :return: The response from SES send_email call\n    \"\"\"\n    return ses_client.send_email(\n        Source=to_email,  # Using TO_EMAIL as the source for simplicity and to ensure it's verified\n        Destination={\n            'ToAddresses': [to_email]\n        },\n        Message={\n            'Subject': {\n                'Data': f\"New Contact Form Submission: {subject}\"\n            },\n            'Body': {\n                'Text': {\n                    'Data': message\n                }\n            }\n        }\n    )\n\n\ndef lambda_handler(event, context):\n    \"\"\"\n    Main handler function for processing contact form submissions.\n\n    :param event: The event dict that contains the details of the AppSync request\n    :param context: Runtime information provided by AWS Lambda\n    :return: A dict containing success status and a message\n    \"\"\"\n    logger.info(\"Received event: %s\", json.dumps(event))\n\n    # Initialize SES client\n    ses = boto3.client('ses')\n\n    try:\n        # Extract form data from the event\n        input_data = event['input']\n        first_name = input_data['name_first']\n        last_name = input_data['name_last']\n        email = input_data['email']\n        subject = input_data['subject']\n        message = input_data['message']\n\n        logger.info(\"Extracted form data: name_first=%s, name_last=%s, email=%s, subject=%s\",\n                    first_name, last_name, email, subject)\n\n        # Get the recipient email from environment variables\n        to_email = os.environ['TO_EMAIL']\n        logger.info(\"Sending email to: %s\", to_email)\n\n        # Construct email body\n        email_body = f\"\"\"\n        From: {first_name} {last_name}\n        Email: {email}\n        \n        Subject: {subject}\n\n        Message:\n        {message}\n        \"\"\"\n\n        # Attempt to send the email\n        response = send_email(ses, to_email, subject, email_body)\n\n        logger.info(\"Email sent successfully. MessageId: %s\", response['MessageId'])\n        return {\n            'success': True,\n            'message': \"Email sent successfully\"\n        }\n\n    except KeyError as e:\n        # Log and handle missing input data\n        logger.error(\"Missing required input: %s\", str(e))\n        return {\n            'success': False,\n            'message': f\"Missing required input: {str(e)}\"\n        }\n    except ClientError as e:\n        # Log and handle AWS SES errors\n        logger.error(\"Error sending email: %s\", e.response['Error']['Message'])\n        return {\n            'success': False,\n            'message': \"Error sending email\"\n        }\n    except Exception as e:\n        # Log and handle any other unexpected errors\n        logger.error(\"Unexpected error: %s\", str(e))\n        return {\n            'success': False,\n            'message': \"An unexpected error occurred\"\n        }"
    },
    {
      "source": "backend/src/lambdas/stripe_publishable_key/index.py",
      "document_content": "import os\nimport json\nimport boto3\n\n\ndef lambda_handler(event, context):\n    # Fetch the Stripe publishable key from AWS Systems Manager Parameter Store\n    ssm = boto3.client('ssm')\n    parameter = ssm.get_parameter(Name='/your-app/stripe/publishable-key', WithDecryption=True)\n    publishable_key = parameter['Parameter']['Value']\n\n    return {\n        'statusCode': 200,\n        'body': json.dumps({'publishableKey': publishable_key})\n    }"
    },
    {
      "source": "backend/src/lambdas/stripe/index.py",
      "document_content": "# file: backend/src/lambdas/stripe/index.py\n# author: Corey Dale Peters\n# created: 2024-05-24\n# description: This is the lambda function that will process a payment using Stripe API.\n\nimport boto3\nimport json\nimport logging\nimport os\nimport stripe\nfrom botocore.exceptions import ClientError\n\n# AWS clients\ndynamodb = boto3.resource('dynamodb')\nsecrets_manager = boto3.client('secretsmanager')\n\n# Environment variables\nENV_LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')\nENV_REGION = os.getenv('AWS_REGION', 'us-east-1')\nENV_ENVIRONMENT = os.getenv('ENVIRONMENT', 'dev')\nPAYMENTS_TABLE_NAME = os.getenv('PAYMENTS_TABLE_NAME')\nSTRIPE_SECRET_KEY_PATH = os.getenv('STRIPE_SECRET_KEY_PATH')\n\n# Setting up logging\nlogger = logging.getLogger()\nlogger.setLevel(ENV_LOG_LEVEL)\n\n\ndef get_stripe_api_key():\n    \"\"\"Retrieve the Stripe API key from AWS Secrets Manager.\"\"\"\n    try:\n        response = secrets_manager.get_secret_value(SecretId=STRIPE_SECRET_KEY_PATH)\n        return response['SecretString']\n    except ClientError as e:\n        logger.error(f\"Error retrieving Stripe API key: {e}\")\n        raise\n\n\ndef validate_input(payload):\n    \"\"\"Validate the input parameters.\"\"\"\n    required_fields = ['amount', 'payment_id', 'customer_id', 'currency', 'payment_method_id', 'created_on']\n    for field in required_fields:\n        if field not in payload:\n            raise ValueError(f\"Missing required field: {field}\")\n\n    try:\n        amount = int(float(payload['amount']) * 100)\n        if amount <= 0:\n            raise ValueError(\"Amount must be positive\")\n    except ValueError:\n        raise ValueError(\"Invalid amount\")\n\n    return payload['payment_method_id'], payload['customer_id'], amount, payload['currency']\n\n\ndef store_transaction(payment_id, customer_id, amount, status, currency, created_on):\n    \"\"\"Store the transaction details in DynamoDB.\"\"\"\n    payments_table = dynamodb.Table(PAYMENTS_TABLE_NAME)\n    try:\n        payments_table.put_item(\n            Item={\n                'customer_id': customer_id,\n                'payment_id': payment_id,\n                'amount': amount,\n                'status': status,\n                'created_on': created_on,\n                'payment_method': 'stripe',\n                'currency': currency\n            }\n        )\n    except ClientError as e:\n        logger.error(f\"Failed to store transaction in DynamoDB: {e}\")\n        raise\n\n\ndef lambda_handler(event, context):\n    try:\n        logger.debug(f\"Received event: {event}\")\n        logger.debug(f\"Context: {context}\")\n\n        # Ensure environment variables are set\n        if not PAYMENTS_TABLE_NAME:\n            raise ValueError(\"Environment variable PAYMENTS_TABLE_NAME is not set\")\n        if not STRIPE_SECRET_KEY_PATH:\n            raise ValueError(\"Environment  variable STRIPE_SECRET_KEY_PATH is not set\")\n        if not ENV_REGION:\n            raise ValueError(\"Environment variable AWS_REGION is not set\")\n        if not ENV_ENVIRONMENT:\n            raise ValueError(\"Environment variable ENVIRONMENT is not set\")\n\n        # Validate input\n        payload = event.get('input')\n        payment_method_id, customer_id, amount, currency = validate_input(payload)\n        logger.debug(f\"Input validated successfully\")\n\n        # Get stripe API key\n        stripe.api_key = get_stripe_api_key()\n        logger.info(\"Stripe API key retrieved successfully\")\n\n        # process payment\n        logger.info(f\"Processing payment for customer {customer_id}, amount: {amount} {currency}\")\n\n        # Create the Payment Intent, since confirm=True it will process immediately\n        intent = stripe.PaymentIntent.create(\n            amount=amount,\n            currency=currency,\n            customer=customer_id,\n            payment_method=payment_method_id,\n            confirm=True,\n            return_url='https://wtv.oneredboot.com/registrationConfirmation',\n        )\n        logger.debug(f\"Payment intent created: {intent}\")\n\n        # Store transaction details\n        store_transaction(intent.id, customer_id, amount, intent.status, currency, payload.get('created_on'))\n        logger.info(f\"Payment processed successfully. Payment ID: {intent.id}\")\n\n        return {\n            'status': 200,\n            'message': intent.id\n        }\n\n    except ValueError as e:\n        logger.error(f\"Input validation error: {str(e)}\")\n        return {\n            'status': 400,\n            'message': json.dumps({'error': str(e)})\n        }\n    except stripe.error.StripeError as e:\n        logger.error(f\"Stripe error: {str(e)}\")\n        return {\n            'status': 400,\n            'message': json.dumps({'error': str(e)})\n        }\n    except ClientError as e:\n        logger.error(f\"AWS service error: {str(e)}\")\n        return {\n            'status': 500,\n            'message': json.dumps({'error': 'Internal server error'})\n        }\n    except Exception as e:\n        logger.error(f\"Unexpected error: {str(e)}\")\n        return {\n            'status': 500,\n            'message': json.dumps({'error': 'Internal server error'})\n        }"
    },
    {
      "source": "backend/src/layers/stripe_layer.yml",
      "document_content": "# --------------------------------------------------- #\n# File: stripe_layer.yml\n# Author: Corey Peters\n# Organization: OneRedBoot.com\n# Description: Stripe Layer CloudFormation Template\n\n# --------------------------------------------------- #\nAWSTemplateFormatVersion: '2010-09-09'\n\n# --------------------------------------------------- #\nTransform: AWS::Serverless-2016-10-31\n\n# --------------------------------------------------- #\nDescription: >\n  Application Infrastructure - Stripe Layer\n\n# --------------------------------------------------- #\nParameters:\n  CustomerId:\n    Default: orb\n    Type: String\n  Environment:\n    Default: dev\n    Type: String\n  ProjectId:\n    Default: integration-hub\n    Type: String\n  Runtime:\n    Default: python3.12\n    Type: String\n\n# --------------------------------------------------- #\nResources:\n\n  # Lambda Layer\n  Layer:\n    Properties:\n      CompatibleRuntimes:\n        - !Ref Runtime\n      ContentUri: stripe/\n      Description: Stripe Payment layer\n      LayerName: !Sub '${CustomerId}-${ProjectId}-${Environment}-stripe-layer'\n    Metadata:\n      BuildMethod: !Ref Runtime\n    Type: AWS::Serverless::LayerVersion\n\n  # Lambda Layer ARN SSM Parameter\n  LayerArnSSMParameter:\n    Properties:\n      Name: !Sub '${CustomerId}-${ProjectId}-${Environment}-stripe-layer-arn'\n      Type: String\n      Value: !Ref Layer\n    Type: AWS::SSM::Parameter\n"
    }
  ]
}