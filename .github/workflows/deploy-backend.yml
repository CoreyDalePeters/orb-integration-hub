name: deploy-backend

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: environment
      region:
        description: 'AWS Region'
        required: true
        type: choice
        options:
          - 'us-east-1'
      customer_id:
        description: 'Customer ID'
        required: true
        type: string
        default: 'orb'
      project_id:
        description: 'Project ID'
        required: true
        type: string
        default: 'integration-hub'

jobs:
  deploy-backend-stacks:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jinja2

      - name: Generate schema files
        run: |
          cd schemas
          python generate.py
          
      - name: Validate GraphQL schema
        run: |
          echo "Validating GraphQL schema..."
          
          # Schema generator now creates appsync.graphql directly
          
          # Check if the schema file exists
          if [ ! -f "./backend/infrastructure/cloudformation/appsync.graphql" ]; then
            echo "ERROR: appsync.graphql not found. Schema generation may have failed."
            exit 1
          fi
          
          # Basic syntax check - if the file has GraphQL type definitions
          if ! grep -q "type " "./backend/infrastructure/cloudformation/appsync.graphql"; then
            echo "ERROR: appsync.graphql appears to be empty or invalid. Missing type definitions."
            exit 1
          fi
          
          # Check for other required GraphQL elements
          if ! grep -q "schema {" "./backend/infrastructure/cloudformation/appsync.graphql"; then
            echo "WARNING: appsync.graphql may be missing schema definition."
          fi
          
          # Check file size is reasonable (not empty, not too small)
          FILE_SIZE=$(wc -c < "./backend/infrastructure/cloudformation/appsync.graphql")
          if [ "$FILE_SIZE" -lt 100 ]; then
            echo "WARNING: appsync.graphql is suspiciously small ($FILE_SIZE bytes)."
          fi
          
          echo "Schema validation complete."

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.region }}

      - name: Upload schema to S3
        run: |
          # Upload as appsync.graphql to match the reference in AppSync CloudFormation template
          aws s3 cp ./schema.graphql \
            s3://${{ inputs.customer_id }}-${{ inputs.project_id }}-build-templates/appsync.graphql

        working-directory: ./backend/infrastructure/cloudformation

      - name: Deploy All Stacks
        run: |
          for stack in bootstrap cognito dynamodb lambdas appsync; do
            echo "Deploying $stack stack..."
          
            sam build --template ${stack}.yml
          
            sam package \
              --template-file ${stack}.yml \
              --s3-bucket ${{ inputs.customer_id }}-${{ inputs.project_id }}-build-artifacts \
              --output-template-file ${stack}-packaged.yml
          
            # Add an override for the schema location
            PARAMS="Environment=${{ inputs.environment }} CustomerId=${{ inputs.customer_id }} ProjectId=${{ inputs.project_id }}"
            if [ "$stack" == "appsync" ]; then
              PARAMS="$PARAMS SchemaS3Key=appsync.graphql"
            fi
          
            sam deploy \
              --template-file ${stack}-packaged.yml \
              --s3-bucket ${{ inputs.customer_id }}-${{ inputs.project_id }}-build-artifacts \
              --stack-name ${{ inputs.customer_id }}-${{ inputs.project_id }}-${stack} \
              --capabilities CAPABILITY_NAMED_IAM \
              --no-fail-on-empty-changeset \
              --parameter-overrides $PARAMS
          
            aws s3 cp ${stack}-packaged.yml \
              s3://${{ inputs.customer_id }}-${{ inputs.project_id }}-build-templates/${stack}-packaged.yml
          
          done
        working-directory: ./backend/infrastructure/cloudformation
        
      - name: Verify AppSync Schema Deployment
        run: |
          echo "Schema deployment verification..."
          
          # Extract the AppSync API ID from CloudFormation outputs
          echo "Getting AppSync API ID from CloudFormation stack..."
          APPSYNC_API_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.customer_id }}-${{ inputs.project_id }}-appsync \
            --query "Stacks[0].Outputs[?OutputKey=='GraphQLApiUrl'].OutputValue" \
            --output text | cut -d'/' -f4)
          
          if [ -z "$APPSYNC_API_ID" ]; then
            echo "Failed to retrieve AppSync API ID, skipping verification"
            exit 0
          fi
          
          echo "Retrieved AppSync API ID: $APPSYNC_API_ID"
          
          # Get the schema that was uploaded to S3
          echo "Downloading appsync.graphql from S3 for comparison..."
          aws s3 cp \
            s3://${{ inputs.customer_id }}-${{ inputs.project_id }}-build-templates/appsync.graphql \
            ./expected-schema.graphql
          
          # Download the current schema from AppSync to verify deployment was successful
          echo "Downloading current schema from AppSync..."
          aws appsync get-introspection-schema \
            --api-id $APPSYNC_API_ID \
            --format SDL \
            --include-directives \
            current-schema.graphql
          
          if [ ! -f "current-schema.graphql" ]; then
            echo "WARNING: Failed to download current schema from AppSync"
            exit 0
          fi
          
          # Compare file sizes as a basic verification
          echo "Verifying deployed schema..."
          CURRENT_SIZE=$(wc -c < "current-schema.graphql")
          EXPECTED_SIZE=$(wc -c < "./expected-schema.graphql")
          DIFF=$((CURRENT_SIZE - EXPECTED_SIZE))
          DIFF_ABS=${DIFF#-}  # Get absolute value
          
          # Allow for some difference due to formatting, but not too much
          if [ "$DIFF_ABS" -gt 500 ]; then
            echo "WARNING: Current schema size ($CURRENT_SIZE bytes) differs significantly from expected ($EXPECTED_SIZE bytes)"
            echo "This may indicate the CloudFormation deployment didn't update the schema correctly."
            echo "You may need to manually update the schema or run another deployment."
          else
            echo "Schema sizes are reasonably close (difference of $DIFF_ABS bytes)"
            echo "Schema verification completed successfully!"
          fi
